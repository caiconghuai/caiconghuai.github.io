<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蔡聪怀</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://conghuai.me/"/>
  <updated>2018-04-14T14:18:28.896Z</updated>
  <id>http://conghuai.me/</id>
  
  <author>
    <name>Conghuai Cai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mean Squared Error</title>
    <link href="http://conghuai.me/2018/04/14/Mean-Squared-Error/"/>
    <id>http://conghuai.me/2018/04/14/Mean-Squared-Error/</id>
    <published>2018-04-14T09:10:01.000Z</published>
    <updated>2018-04-14T14:18:28.896Z</updated>
    
    <content type="html"><![CDATA[<p>数理统计中均方误差是指参数估计值与参数值之差平方的期望值，记为MSE。MSE是衡量“平均误差”的一种较方便的方法，MSE可以评价数据的变化程度，MSE的值越小，说明预测模型描述实验数据具有更好的精确度。</p><h1 id="SSE（和方差）"><a href="#SSE（和方差）" class="headerlink" title="SSE（和方差）"></a>SSE（和方差）</h1><p>在统计学历，该参数计算的是拟合数据和原始对应点的误差的平方和，计算公式为：</p><p>$$SSE =\sum_{i=1}^mw_i(y_i-\hat{y_i})^2$$</p><p>其中$y_i$是真实数据，$\hat{y_i}$是拟合的数据，$w_i&gt;0$，从这里可以看出SSE接近于0，说明模型选择和拟合更好，数据预测也越成功。</p><h1 id="MSE（均方方差）"><a href="#MSE（均方方差）" class="headerlink" title="MSE（均方方差）"></a>MSE（均方方差）</h1><p>该统计参数是预测数据和原始数据对应点误差的平方和的均值，也就是$\frac{SSE}{n}$，和SSE没有太大的区别，计算公式为：</p><p>$$MSE=\frac{SSE}{n}=\frac{1}{n}\sum_{i=1}^mw_i(y_i-\hat{y_i})^2$$</p><p>其中，n为样本的个数。</p><h1 id="RMSE"><a href="#RMSE" class="headerlink" title="RMSE"></a>RMSE</h1><p>该统计参数，也叫回归系统的拟合标准差，是MSE的平方根，计算公式为：</p><p>$$RMSE=\sqrt{MSE}=\sqrt{\frac{SSE}{n}}=\sqrt{\frac{1}{n}\sum_{i=1}^mw_i(y_i-\hat{y_i})^2}$$</p><h1 id="Mean-Squared-Loss的概率解释"><a href="#Mean-Squared-Loss的概率解释" class="headerlink" title="Mean-Squared Loss的概率解释"></a>Mean-Squared Loss的概率解释</h1><p>假设我们的模型是二维平面的线性回归模型：$h_{\theta}(x_i)=\theta_0+\theta_1x$，对于这个模型，我们定义损失函数为MSE，将得到如下的表达式：</p><p>$J = \frac{1}{N}\sum_{i=1}^N(y_i-h_{\theta}(x_i))^2$</p><p>下面我们试着通过概率的角度，推导出上述的MSE损失函数表达式。</p><p>在线性回归模型中，我们最终希望对于输入$X$进行线性组合得到值Y，考虑到输入带有噪声的情况的表达式如下：</p><p>$$Y=\theta_0+\theta_1x+\eta$$</p><p>为了使模型更合理，我们假设$\eta$服从均值为0，方差为1的高斯分布，即$\eta\sim N(0,1)$。所以有：</p><p>$$E[Y]=E[\theta_0+\theta_1x+\eta]=\theta_0+\theta_1x$$</p><p>$$Var[Y]=Var[\theta_0+\theta_1x+\eta]=1$$</p><p>所以，Y服从均值为$\theta_0+\theta_1x$，方差为1的高斯分布，则样本点$(x_i,y_i)$的概率为：</p><p>$$p(y_i|x_i)=e^{-\frac{(y_i-(\theta_0+\theta_1x_i))^2}{2}}$$</p><p>有了单个样本的概率，我们就可以计算样本集的似然概率，我们假设每个样本是独立的：</p><p>$$L(x,y)=\prod_{i=1}^Ne^{-\frac{(y_i-(\theta_0+\theta_1x_i))^2}{2}}$$</p><p>去对数，得到对数似然函数：</p><p>$$l(x,y)=-\frac{1}{2}\sum_{i=1}^N(y_i-(\theta_0+\theta_1x_i))^2$$</p><p>这个对数似然函数的形式和我们的MSE损失函数的定义是一样的。所以，使用MSE损失函数意味着，你假设你的模型是对带有服从高斯分布的噪声的输入数据做估计。</p><h1 id="损失函数效果"><a href="#损失函数效果" class="headerlink" title="损失函数效果"></a>损失函数效果</h1><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>使用MSE的一个缺点就是其偏导值在输出概率值接近0或者接近1的时候非常小，这可能会造成模型刚开始训练时，偏导值几乎消失。</p><p>假设我们的MSE损失函数为：$J = \frac{1}{2}(y_i - \hat{y_i})^2$，偏导为：$\frac{dJ}{dW} = (y_i - \hat{y_i})\sigma’(Wx_i + b)x_i$，其中$\sigma’(Wx_i + b)$为$\sigma(Wx_i + b)(1 - \sigma(Wx_i + b))$。可以看出来，在$\sigma(Wx_i + b)$值接近0或者1的时候，$\frac{dJ}{dW}$的值都会接近于0，其函数图像如下：</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-14-141825.jpg" alt="sigmoid_and_derivative_plot"></p><p>这导致模型在一开始学习的时候速率非常慢。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1]. <a href="http://rohanvarma.me/Loss-Functions/" target="_blank" rel="noopener">Picking Loss Functions - A comparison between MSE, Cross Entropy, and Hinge Loss</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数理统计中均方误差是指参数估计值与参数值之差平方的期望值，记为MSE。MSE是衡量“平均误差”的一种较方便的方法，MSE可以评价数据的变化程度，MSE的值越小，说明预测模型描述实验数据具有更好的精确度。&lt;/p&gt;
&lt;h1 id=&quot;SSE（和方差）&quot;&gt;&lt;a href=&quot;#SSE
      
    
    </summary>
    
      <category term="Machine Learning" scheme="http://conghuai.me/categories/Machine-Learning/"/>
    
      <category term="Loss Function" scheme="http://conghuai.me/categories/Machine-Learning/Loss-Function/"/>
    
    
      <category term="math" scheme="http://conghuai.me/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Regularization</title>
    <link href="http://conghuai.me/2018/04/12/Regularization/"/>
    <id>http://conghuai.me/2018/04/12/Regularization/</id>
    <published>2018-04-12T14:37:46.000Z</published>
    <updated>2018-04-14T03:12:40.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h1><p>过拟合是机器学习中一个比较常见的问题，而正则化是解决模型过拟合的一种手段。我们先看一下范数的定义：</p><blockquote><p>Going a bit further, we define $||x||_p$ as a “p-norm”. Given $x$, a vector with $i$ components, a p-norm is defined as:</p><p>$$|| x ||_p = \left(\sum_i |x_i|^p\right)^{1/p}$$</p><p>The simplest norm conceptually is Euclidean distance. This is what we typically think of as distance between two points in space:</p><p>$$|| x ||_2 = \sqrt{\left(\sum_i x_i^2\right)} = \sqrt{x_1^2 + x_2^2 + \ldots + x_i^2}$$</p><p>Another common norm is taxicab distance, which is the 1-norm:</p><p>$$|| x ||_1 = \sum_i |x_i| = |x_1| + |x_2| + \ldots + |x_i|$$</p><p>Taxicab distance is so-called because it emulates moving between two points as though you are moving through the streets of Manhattan in a taxi cab. Instead of measuring the distance “as the crow flies” it measures the right-angle distance between two points:</p><p><img src="../../../../../../../Desktop/Manhattan_distance.svg" alt="Manhattan_distance"></p></blockquote><p>正则化（Regularization）是机器学习中一种常用的技术，其主要目的是控制模型复杂度，减小过拟合。最基本的正则化方法是在原目标（代价）函数 中添加惩罚项，对复杂度高的模型进行“惩罚”。其数学表达形式为：</p><p>$$\tilde{J}(w;X,y)=J(w;X,y)+\alpha \Omega (w)$$</p><p>式中：</p><ul><li>$X，y$为训练样本和相应标签；</li><li>$w$为权重系数向量；</li><li>$J()$为目标函数；</li><li>$\Omega(w)$为惩罚项，即模型“规模”的某种度量；</li><li>$\alpha$控制正则化强弱。</li></ul><p>不同的$\Omega$函数对权重$w$的最优解有不同的偏好，因此会产生不同的正则化效果，最常用的$\Omega$函数有两种，即$l_1$范数和$l_2$范数，称为$l_1$正则化和$l_2$正则化：</p><p>$$ l_1: \Omega (w) = || w ||_1 = \sum_{i=1}^k |w_i| $$</p><p>$$ l_2: \Omega (w) = || w ||_2 = \sum_{i=1}^k w_i^2 $$</p><p>带有L1正则化的回归模型通常被称为<strong>Lasso Regression</strong>，带有L2正则化的回归模型通常被称为<strong>Ridge Regression</strong>。</p><p>L1正则化和L2正则化主要的区别在于，L1正比于参数的绝对值，而L2正比于参数的平方。这导致了两种正则化方式会产生不同的效果。</p><h1 id="公式来源分析"><a href="#公式来源分析" class="headerlink" title="公式来源分析"></a>公式来源分析</h1><h2 id="基于约束条件的最优化"><a href="#基于约束条件的最优化" class="headerlink" title="基于约束条件的最优化"></a>基于约束条件的最优化</h2><p>对于模型权重系数$w$求解释通过最小化目标函数实现的，即求解：</p><p>$$min_wJ(w;X,y)$$</p><p>通常情况下，模型复杂度与系数$w$的个数成线性关系：即$w$数量越多，模型越复杂。因此，为了限制模型的复杂度，很自然的想法就是减少系数$w$的个数，即让$w$向量中一些元素为0或者说限制$w$中非零元素的数量。因此，我们可以在原优化问题中加入一个约束条件：</p><p>$$min_wJ(w;X,y),\ s.t. ||w||_0 \leq C$$</p><p>式中，$||\cdot||_0$范数表示向量中非零元素的个数，但由于该问题是一个NP问题，不易求解，为此我们可以放松一下约束条件，为了达到近似效果，我们不严格要求某些权重$w$为0，而是要求权重$w$应接近于0，即尽量小。从而可用$l_1、l_2$范数来近似$l_0$范数，即：</p><p>$$min_wJ(w;X,y),\ s.t. ||w||_1 \leq C$$ 或</p><p>$$min_wJ(w;X,y),\ s.t. ||w||_2^2 \leq C$$（为了后续方便处理，对$||w||_2$进行平方）</p><p>利用拉格朗日算子法，我们可将上述带约束条件的最优化问题转换为不带约束项的优化问题，构建拉格朗日函数：</p><p>$$min_wJ(w;X,y) + \alpha^*||w||_1$$或</p><p>$$min_wJ(w;X,y) + \alpha^*||w||_2^2$$</p><p>因此，我们得到了对$l_1、l_2$正则化的第一种理解：</p><ul><li>$l_1$正则化等价于在原优化目标函数中增加约束条件$||w||_1 \leq C$</li><li>$l_2$正则化等价于在原优化目标函数中增加约束条件$||w||_2^2 \leq C$</li></ul><h2 id="最大后验概率估计"><a href="#最大后验概率估计" class="headerlink" title="最大后验概率估计"></a>最大后验概率估计</h2><p>在最大似然估计中，假设权重$w$是未知的参数，从而求得对数似然函数：</p><p>$$l(w)=log[P(y|X;w)]=log[\prod_iP(y^i|x^i;w)]$$</p><p>通过假设$y^i$的不同概率分布，即可得到不同的模型，例如若假设$y^i\sim N(w^Tx^i, \sigma^2)$的高斯分布，则有：</p><p>$$l(w)=log[\prod_i\frac{1}{\sqrt {2\pi}\sigma}e^{-\frac{(y^i-w^Tx^i)^2}{2\sigma^2}}]=-\frac{1}{2\sigma^2}\sum_i(y_i-w^Tx^i)^2+C$$</p><p>可令$J(w;X,y) = -l(w)$</p><p>在最大后验概率估计中，则将权重$w$看做随机变量，也具有某种分布，从而有：</p><p>$p(w|X,y)=\frac{P(w,X,y)}{P(X,y)}=\frac{P(X,y|w)P(w)}{P(X,y)}\propto P(y|X,w)P(w)$</p><p>对上述取对数有：</p><p>$$MAP = logP(y|X,w)P(w) = logP(y|X,w)+logP(w)$$</p><p>可以看到，后验概率在似然函数的基础上增加一项$logP(w)$，$P(w)$的意义是对权重系数$w$的概率分布的先验假设， 在收集到训练样本${X,y}$后，则可根据$w$在${X,y}$下的后验概率对$w$进行修改正，从而做出对$w$更好地估计。</p><p>若假设$w_j$的先验分布是均值为0的高斯分布，即$w_j\sim N(0, \sigma^2)$，则有：</p><p>$$logP(w) = log\prod_jP(w_j)=log\prod_j[\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(w_j)^2}{2\sigma^2}}]=-\frac{1}{2\sigma^2}\sum_jw_j^2+C’$$</p><p>可以看到，在高斯分布下$logP(w)$的效果等价于在代价函数中增加$l_2$正则项。</p><p>若假设$w_j$服从均值为0、参数为$a$的拉普拉斯分布，即：</p><p>$P(w_j)=\frac{1}{\sqrt{2a}}e^{\frac{-|w_j|}{a}}$</p><p>则有：</p><p>$$logP(w) = log\prod_j\frac{1}{\sqrt{2a}}e^{\frac{-|w_j|}{a}}=-\frac{1}{a}\sum_j|w_j|+C’$$</p><p>可以看到，在拉普拉斯分布下$logP(w)$的效果等价于在代价函数中增加$l_1$正则化。</p><p>因此，我们得到对于$l_1、l_2$正则化的第二种理解：</p><ul><li>$l_1$正则化可通过假设权重$w$的先验分布为拉普拉斯分布，由最大后验概率估计导出；</li><li>$l_2$正则化可通过假设权重$w$的先验分布为高斯分布，由最大后验概率估计导出。</li></ul><h1 id="正则化效果理解"><a href="#正则化效果理解" class="headerlink" title="正则化效果理解"></a>正则化效果理解</h1><h2 id="直观理解"><a href="#直观理解" class="headerlink" title="直观理解"></a>直观理解</h2><p>有了正则化公式来源分析，我们现在从优化的角度来看一下正则化对目标函数的影响。考虑带约束条件的优化解释，对$l_2$正则化为：</p><p>$$min_w J(w;X,y)\ s.t. ||w||_2 \leq C$$</p><p>该问题的求解示意图如下：</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-14-031232.jpg" alt="v2-7431d8a79deec5d0ab3193b6a3611b95_hd"></p><p>图中椭圆为原目标函数$J(w)$的一条等高线，圆为半径$\sqrt{C}$的$l_2$范数球。由于约束条件的限制，$w$必须位于$l_2$范数球内。考虑边界上的一点$w$，图中蓝色箭头为$J(w)$在该处的梯度方向$\triangledown J(w)$，红色箭头为$l_2$范数球在该处的法线方向。由于$w$不能离开边界（否则就会违反约束条件），因为在使用梯度下降法更新$w$时，只能朝$\triangledown J(w)$在范数球上$w$处的切线方向更新，即图中的绿色箭头的方向。如此$w$将沿着边界移动，当$\triangledown J(w)$与范数球上$w$处的切线方向更新，即图中绿色箭头的方向。如果$w$将沿着边界移动，当$\triangledown J(w)$与范数球上$w$处的法线平行时，此时，$\triangledown J(w)$在切线方向的分量为0，$w$将无法继续移动，从而达到最优解$w^*$（图中红色点所示）。</p><p>对于$l_1$正则化：</p><p>$$min_w J(w;X,y)\ s.t. ||w||_1 \leq C$$</p><p>同理，其求解示意图如下所示：</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-14-031238.jpg" alt="v2-592216faffaa338fc792430a538afefc_hd"></p><p>其主要差别在于$l1、l_2$范数球的形状差异。由于此时每条边界上$w$的切线和法线方向保持不变，在图中$w$一直朝着$\triangledown J(w)$的切线方向的分量沿着边界向左上移动。当$w$跨过顶点到达$w’$处时，$\triangledown J(w)$在切线方向的分量变为右上方，因而$w$将朝右上方移动。最终，$w$将稳定在顶点处，达到最优解$w^*$，此时，可以看到$w_1=0$，这也就是采用$l_1$范数会使得$w$产生稀疏性的原因。</p><p>以上的分析虽然是基于二维的情况，但不难将其推广到多维度情况，其主要目的是为了直观地说明$l_1、l_2$正则化最优解的差异，以及$l_1$范数为什么会产生稀疏性。</p><h1 id="正则化效果分析"><a href="#正则化效果分析" class="headerlink" title="正则化效果分析"></a>正则化效果分析</h1><h2 id="稀疏性"><a href="#稀疏性" class="headerlink" title="稀疏性"></a>稀疏性</h2><p>从以上的正则化效果理解其实已经可以看出$L1$正则化可以使得答案稀疏的效果，如果那个还不好理解，可以看下面这个例子。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>L1正则化和L2正则化哪个能产生稀疏的解呢？答案是<strong>L1正则化</strong>。假设我们现在要求解模型$Ax=b$，也就是在2维空间上找到一条直线来拟合样本点。我们需要两个点才能去固定一条直线，但是，假设我们现在的训练样本中只有一个点。那么我们将得到无穷多个解。假设，该点为(10, 5)，直线为$y=a*x+b$，那么，该例子可形式化为求解模型：$b = 5 - 10*a$ 的参数。</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-13-093559.jpg" alt="1_sMS5qc_2O6h87L_NF0B8Mw"></p><p>那么，当我们加上正则化项后，又该如何求解呢？</p><p>假设，我们的正则化的值等于一个常数，它的图像如下所示：</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-13-093553.jpg" alt="1_uHXe9qibzdqieBfje7Hggw"></p><p>我们注意到，在红色直线上，并不是所有点都是稀疏点，而只有在顶点处的点才是稀疏的，因为顶点处的点某些维度为0。现在，我们要做的是就是扩大这个红色的形状，让它慢慢的靠近上图中蓝色的直线直到两者有公共点。当我们慢慢增大后，我们发现，最有可能成为公共交点的就是红色形状的顶点。而从刚才的分析中，我们知道，红色形状的顶点是稀疏点，所以，加上L1正则化后，得到的解往往都是稀疏的，而且这些公共点对应的常数$c$也是比较小的。</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-13-093556.jpg" alt="1_0QRBxi6dlivROqCSFQeYhA"></p><p>而，L2正则化没有这种稀疏性特点。</p><h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h3><p>L1正则化具有特征选择的功能，这是因为L1正则化通常会产生系数的解，假设我们有100个系数，在L1正则化的作用下只有10个系数非0，那么这就等价于我们从100个特征中抽出10个重要的特征。</p><h2 id="计算复杂度"><a href="#计算复杂度" class="headerlink" title="计算复杂度"></a>计算复杂度</h2><p>在计算效率上，L2优于L1，因为L1正则化通常是不可导的，这导致我们不能用矩阵方式来求解它，而大多数是依赖于近似的方式。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1]. <a href="https://medium.com/mlreview/l1-norm-regularization-and-sparsity-explained-for-dummies-5b0e4be3938a" target="_blank" rel="noopener">L1 Norm Regularization and Sparsity Explained for Dummies</a></p><p>[2]. <a href="https://www.wikiwand.com/en/Regularization_(mathematics" target="_blank" rel="noopener">Regularization (mathematics)</a>)</p><p>[3]. <a href="https://www.kaggle.com/residentmario/l1-norms-versus-l2-norms" target="_blank" rel="noopener">L1 Norms versus L2 Norms</a></p><p>[4]. <a href="https://www.youtube.com/playlist?list=PLXVfgk9fNX2I7tB6oIINGBmW50rrmFTqf" target="_blank" rel="noopener">Hsuan-Tien Lin. Machine Learning Foundations Lecture 14.</a></p><p>[5]. <a href="https://zhuanlan.zhihu.com/p/29360425" target="_blank" rel="noopener">深入理解L1、L2正则化</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;范数&quot;&gt;&lt;a href=&quot;#范数&quot; class=&quot;headerlink&quot; title=&quot;范数&quot;&gt;&lt;/a&gt;范数&lt;/h1&gt;&lt;p&gt;过拟合是机器学习中一个比较常见的问题，而正则化是解决模型过拟合的一种手段。我们先看一下范数的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Machine Learning" scheme="http://conghuai.me/categories/Machine-Learning/"/>
    
      <category term="Loss Function" scheme="http://conghuai.me/categories/Machine-Learning/Loss-Function/"/>
    
      <category term="Model Optimization" scheme="http://conghuai.me/categories/Machine-Learning/Model-Optimization/"/>
    
    
      <category term="math" scheme="http://conghuai.me/tags/math/"/>
    
      <category term="ml" scheme="http://conghuai.me/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>Hinge Loss Function</title>
    <link href="http://conghuai.me/2018/04/10/Hinge-Loss-Function/"/>
    <id>http://conghuai.me/2018/04/10/Hinge-Loss-Function/</id>
    <published>2018-04-10T06:39:46.000Z</published>
    <updated>2018-04-12T00:39:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数特性"><a href="#函数特性" class="headerlink" title="函数特性"></a>函数特性</h1><p>在机器学习中，<strong>hinge loss</strong>是一种损失函数，它通常用于”maximum-margin”的分类任务中，如支持向量机。数学表达式为：</p><p>$$L(y)=max(0,1-\hat{y}y)$$</p><p>其中$\hat{y}$表示预测输出，通常都是软结果（就是说输出不是0，1这种，可能是0.87。），$y$表示正确的类别。</p><ul><li>如果$\hat{y}y&lt;1$，则损失为：$1-\hat{y}y$</li><li>如果$\hat{y}y&gt;=1$，则损失为：0</li></ul><p>其函数图像如下，与0-1损失对比：</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-10-065844.jpg" alt="Hinge_loss_vs_zero_one_loss.svg"></p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>以支持向量机为例，其模型为：$\hat{y}=w\cdot x$，如果用hinge损失，其求导结果如下：</p><p>$$\begin{split}\frac{\partial L}{\partial w_i}=\begin{cases} -y\cdot x_i, &amp; \text{if $\hat{y}y&lt;1$} \\ 0, &amp; \text{otherwise}\end{cases}\end{split}$$</p><h1 id="变种"><a href="#变种" class="headerlink" title="变种"></a>变种</h1><p>实际应用中，一方面很多时候我们的y的值域并不是[-1,1]，比如我们可能更希望y更接近于一个概率，即其值域最好是[0,1]。另一方面，很多时候我们希望训练的是两个样本之间的相似关系，而非样本的整体分类，所以很多时候我们会用下面的公式： </p><p>$$l(y,y’)=max(0, m-y+y’)$$</p><p>其中，y是正样本的得分，y’是负样本的得分，m是margin（自己选一个数）</p><p>即我们希望正样本分数越高越好，负样本分数越低越好，但二者得分之差最多到m就足够了，差距增大并不会有任何奖励。</p><p>比如，我们想训练词向量，我们希望经常同时出现的词，他们的向量内积越大越好；不经常同时出现的词，他们的向量内积越小越好。则我们的hinge loss function可以是： </p><p>$$l(w,w_+,w_-)=max(0, 1-w^T\cdot w_+ + w^T\cdot w_-) $$</p><p>其中，w是当前正在处理的词，$w_+$是w在文中前3个词和后3个词中的某一个词，$w_−$是随机选的一个词。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1]. <a href="https://www.wikiwand.com/en/Hinge_loss" target="_blank" rel="noopener">Wikiwand Hinge loss</a></p><p>[2]. <a href="https://blog.csdn.net/luo123n/article/details/48878759" target="_blank" rel="noopener">损失函数：Hinge Loss（max margin）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数特性&quot;&gt;&lt;a href=&quot;#函数特性&quot; class=&quot;headerlink&quot; title=&quot;函数特性&quot;&gt;&lt;/a&gt;函数特性&lt;/h1&gt;&lt;p&gt;在机器学习中，&lt;strong&gt;hinge loss&lt;/strong&gt;是一种损失函数，它通常用于”maximum-margin
      
    
    </summary>
    
      <category term="Machine Learning" scheme="http://conghuai.me/categories/Machine-Learning/"/>
    
      <category term="Loss Function" scheme="http://conghuai.me/categories/Machine-Learning/Loss-Function/"/>
    
    
      <category term="math" scheme="http://conghuai.me/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Negative Maximum Likehood Loss Function</title>
    <link href="http://conghuai.me/2018/04/08/Negative-Maximum-Likehood-Loss-Function/"/>
    <id>http://conghuai.me/2018/04/08/Negative-Maximum-Likehood-Loss-Function/</id>
    <published>2018-04-08T08:15:39.000Z</published>
    <updated>2018-04-08T09:00:55.773Z</updated>
    
    <content type="html"><![CDATA[<p>损失函数是用来衡量模型好坏的一个标准，在机器学习里，我们通常希望模型有比较小的<code>loss</code>，那么该如何选择我们的损失函数呢？最小化负的似然函数，借鉴了统计学的思想，是一种常见的损失函数。</p><h1 id="Nagative-Maximum-Likehood"><a href="#Nagative-Maximum-Likehood" class="headerlink" title="Nagative Maximum Likehood"></a>Nagative Maximum Likehood</h1><p>首先，假设我们有一堆的样本点：$D={(x_1,-1),(x_2,1),…,(x_N,-1)}$，我们希望我们训练出来的模型能够准确预测$x_i$的类别。通常来说，我们定义的模型都会对每个目标类别输出一个概率值，所以，本质上，我们希望得到一个函数，它能告诉我们样本$x_i$属于+1的概率（或者属于-1的概率，本质上是一样的）：$f(x)=P(+1|x)$</p><p>$$\begin{split}P(y|x)=\begin{cases} f(x) &amp; \text{for $y=+1$} \\ 1-f(x) &amp; \text{for y=-1}\end{cases}\end{split}$$</p><p>所以，我们的模型$h$产生样本集$D$的概率有多大呢：</p><p>$$L=P(x1)h(x1)\cdot P(x_2)(1-h(x_2))\cdot …\cdot P(x_N)(1-h(x_N))$$</p><p>如果我们的模型足够好的话，那么上面的似然函数的值会很大，我们现在需要在假设空间里面，把最好的$h$给找出来，哪个$h$最好呢？就是使得$L$最大的那个模型咯。</p><p>$$L=P(x1)h_1(x1)\cdot P(x_2)(1-h_1(x_2))\cdot …\cdot P(x_N)(1-h_1(x_N))$$</p><p>$$L=P(x1)h_2(x1)\cdot P(x_2)(1-h_2(x_2))\cdot …\cdot P(x_N)(1-h_2(x_N))$$</p><p>…</p><p>$$L=P(x1)h_k(x1)\cdot P(x_2)(1-h_k(x_2))\cdot …\cdot P(x_N)(1-h_k(x_N))$$</p><p>我们发现，对于不同的模型，都要乘上$P(x_1)P(x_2)…P(x_N)$，这对于我们比较不同模型的好坏，没有帮助，所有我们可以把它略去。</p><p>所以，似然函数表达式变为：</p><p>$$L=h_k(x1)\cdot (1-h_k(x_2))\cdot …\cdot(1-h_k(x_N))$$</p><p>我们通常选择sigmoid function当做$h$，本文最后会给出sigmoid function的性质。由于采用了sigmoid函数，似然函数表达式变为：</p><p>$$L=h_k(x1)\cdot h_k(-x_2)\cdot …\cdot h_k(-x_N)$$</p><p>进一步的可以写成：</p><p>$$L=h_k(y_1x_1)\cdot h_k(y_2x_2)\cdot …\cdot h_k(y_Nx_N)=\prod_{n=1}^Nh(y_nx_n)$$</p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>对上述的似然函数取负数，再取log，可以得到最终的负对数似然损失函数：</p><p>$$MLE = \frac{1}{N}\sum_{n=1}^N-ln\theta(y_nw^Tx_n)=\frac{1}{N}\sum_{n=1}^Nln(1+e^{-y_nw^Tx_n})$$</p><h2 id="求导"><a href="#求导" class="headerlink" title="求导"></a>求导</h2><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-08-085532.jpg" alt="Screen Shot 2018-04-08 at 16.55.05"></p><h1 id="sigmoid-function"><a href="#sigmoid-function" class="headerlink" title="sigmoid function"></a>sigmoid function</h1><p>我们通常会选择<code>sigmoid function</code>当做$h$。</p><h2 id="函数特性"><a href="#函数特性" class="headerlink" title="函数特性"></a>函数特性</h2><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-08-085535.jpg" alt="Screen Shot 2018-04-08 at 16.40.42"></p><p>$$\theta(s)=\frac{e^s}{1+e^s}=\frac{1}{1+e^{-s}}$$</p><ul><li>$\theta(负无穷)$=0；</li><li>$\theta(0)=\frac{1}{2}$</li><li>$\theta(正无穷)=1$</li><li>连续、单调</li><li>$\theta(-s)=1-\theta(s)$</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1]. <a href="http://www.csuldw.com/2016/03/26/2016-03-26-loss-function/" target="_blank" rel="noopener">机器学习-损失函数</a></p><p>[2]. 林轩田 “机器学习基石”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;损失函数是用来衡量模型好坏的一个标准，在机器学习里，我们通常希望模型有比较小的&lt;code&gt;loss&lt;/code&gt;，那么该如何选择我们的损失函数呢？最小化负的似然函数，借鉴了统计学的思想，是一种常见的损失函数。&lt;/p&gt;
&lt;h1 id=&quot;Nagative-Maximum-Lik
      
    
    </summary>
    
      <category term="Machine Learning" scheme="http://conghuai.me/categories/Machine-Learning/"/>
    
      <category term="Loss Function" scheme="http://conghuai.me/categories/Machine-Learning/Loss-Function/"/>
    
    
      <category term="math" scheme="http://conghuai.me/tags/math/"/>
    
      <category term="ml" scheme="http://conghuai.me/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>Cross Entropy Loss Function</title>
    <link href="http://conghuai.me/2018/04/08/Cross%20Entropy%20Loss%20Function/"/>
    <id>http://conghuai.me/2018/04/08/Cross Entropy Loss Function/</id>
    <published>2018-04-08T02:54:16.000Z</published>
    <updated>2018-04-14T13:58:29.941Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章中，讨论的Cross Entropy损失函数常用于分类问题中，但是为什么它会在分类问题中这么有效呢？我们先从一个简单的分类例子来入手。</p><h1 id="预测政治倾向例子"><a href="#预测政治倾向例子" class="headerlink" title="预测政治倾向例子"></a>预测政治倾向例子</h1><p>我们希望根据一个人的年龄、性别、年收入等相互独立的特征，来预测一个人的政治倾向，有三种可预测结果：民主党、共和党、其他党。假设我们当前有两个模型，这两个模型最后输出都是通过softmax的方式得到对于每个预测结果的概率：</p><p><strong>模型1</strong>：</p><table><thead><tr><th style="text-align:center">COMPUTED</th><th style="text-align:center">TARGETS</th><th style="text-align:center">CORRECT?</th></tr></thead><tbody><tr><td style="text-align:center">0.3 0.3 0.4</td><td style="text-align:center">0 0 1（民主党）</td><td style="text-align:center">正确</td></tr><tr><td style="text-align:center">0.3 0.4 0.3</td><td style="text-align:center">0 1 0（共和党）</td><td style="text-align:center">正确</td></tr><tr><td style="text-align:center">0.1 0.2 0.7</td><td style="text-align:center">1 0 0 （其他党）</td><td style="text-align:center">错误</td></tr></tbody></table><p><strong>模型1</strong>对于样本1和样本2以非常微弱的优势判断正确，对于样本3的判断则彻底错误。</p><p><strong>模型2</strong>：</p><table><thead><tr><th style="text-align:center">COMPUTED</th><th style="text-align:center">TARGETS</th><th style="text-align:center">CORRECT?</th></tr></thead><tbody><tr><td style="text-align:center">0.1 0.2 0.7</td><td style="text-align:center">0 0 1（民主党）</td><td style="text-align:center">正确</td></tr><tr><td style="text-align:center">0.1 0.7 0.2</td><td style="text-align:center">0 1 0（共和党）</td><td style="text-align:center">正确</td></tr><tr><td style="text-align:center">0.3 0.4 0.3</td><td style="text-align:center">1 0 0 （其他党）</td><td style="text-align:center">错误</td></tr></tbody></table><p><strong>模型2</strong>对于样本1和样本2判断非常准确，对于样本3判断错误，但是相对来说没有错得太离谱。</p><p>好了，有了模型之后，我们需要通过定义损失函数来判断模型在样本上的表现了，那么我们可以定义哪些损失函数呢？</p><h2 id="Classification-Error（分类错误率）"><a href="#Classification-Error（分类错误率）" class="headerlink" title="Classification Error（分类错误率）"></a>Classification Error（分类错误率）</h2><p>最为直接的损失函数定义为：$classification\ error=\frac{count\ of\ error\ items}{count\ of \ all\ items}$</p><p><strong>模型1：</strong>$classification\ error=\frac{1}{3}$</p><p><strong>模型2：</strong>$classification\ error=\frac{1}{3}$</p><p>我们知道，<strong>模型1</strong>和<strong>模型2</strong>虽然都是预测错了1个，但是相对来说<strong>模型2</strong>表现的更好，损失函数值照理来说应该更小，但是，很遗憾的是，$classification\ error$并不能判断出来，所以这种损失函数虽然好理解，但表现不太好。</p><h2 id="Mean-Squared-Error-平方和"><a href="#Mean-Squared-Error-平方和" class="headerlink" title="Mean Squared Error (平方和)"></a>Mean Squared Error (平方和)</h2><p>平方和损失也是一种比较常见的损失函数，其定义为：$MSE=\frac{1}{n}\sum_{i}^n(\hat{y_i}-y_i)$</p><p><strong>模型1：</strong>$MSE=\frac{0.54+0.54+1.34}{3}=0.81$</p><p><strong>模型2：</strong>$MSE=\frac{0.14+0.14+0.74}{3}=0.34$</p><p>MSE能够判断出来<strong>模型2</strong>优于<strong>模型1</strong>，那为什么不采样这种损失函数呢？原因在于，使用该损失函数时，得到的表达式是非凸函数，有很多局部的极值点。在做优化的时候不太好处理。</p><p>有了上面的直观分析，我们可以清楚的看到，对于分类问题的损失函数来说，分类错误率和平方和损失都不是很好的损失函数，下面我们来看一下交叉熵损失函数是怎么解决这个问题的。</p><h1 id="Cross-Entropy-Error-Function"><a href="#Cross-Entropy-Error-Function" class="headerlink" title="Cross Entropy Error Function"></a>Cross Entropy Error Function</h1><p>交叉熵损失函数经常用于分类问题中，特别是在神经网络做分类问题时，也经常使用交叉熵作为损失函数，此外，由于交叉熵涉及到计算每个类别的概率，所以交叉熵几乎每次都和softmax函数一起出现。</p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h3 id="二分类"><a href="#二分类" class="headerlink" title="二分类"></a>二分类</h3><p>在二分的情况下，模型最后需要预测的结果只有两种情况，对于每个类别我们的预测得到的概率为$p$和$1-p$。此时表达式为：$−(ylog(p)+(1−y)log(1−p))$</p><h3 id="多分类"><a href="#多分类" class="headerlink" title="多分类"></a>多分类</h3><p>多分类的情况实际上就是对二分类的扩展：$-\sum_{c=1}^My_{o,c}\log(p_{o,c})$</p><p>其中：</p><ul><li>$M$——类别的数量；</li><li>$y$——指示变量（0或1）,如果该类别和样本观测到的类别相同就是1，否则是0；</li><li>$p$——对于观测样本属于类别c的预测概率。</li></ul><h2 id="函数图像"><a href="#函数图像" class="headerlink" title="函数图像"></a>函数图像</h2><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-08-024353.jpg" alt="cross_entropy"></p><p>可以看出，该函数是凸函数，求导时能够得到全局最优值。</p><h2 id="求导"><a href="#求导" class="headerlink" title="求导"></a>求导</h2><p>我们用神经网络最后一层输出的情况，来看一眼整个模型预测及获得损失的的流程：</p><ol><li>神经网络最后一层得到每个类别的得分<strong>scores</strong>；</li><li>该得分经过softmax转换为概率输出；</li><li>模型预测的类别概率输出与真实类别的one hot形式进行cross entropy损失函数的计算。</li></ol><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-08-064410.jpg" alt="Screen Shot 2018-04-08 at 11.56.55"></p><p>下面，我们以二分类的情形来推导一下整个求导公式，我们将求导分成两个过程，即拆成两项偏导的乘积。：</p><p>$$\frac{\partial E}{\partial score_i}=\frac{\partial E}{\partial p_i}\cdot \frac{\partial p_i}{\partial score_i}$$</p><h3 id="计算第一项：-frac-partial-E-partial-p-i"><a href="#计算第一项：-frac-partial-E-partial-p-i" class="headerlink" title="计算第一项：$\frac{\partial E}{\partial p_i}$"></a>计算第一项：$\frac{\partial E}{\partial p_i}$</h3><p>\begin{align}<br>\frac{\partial E}{\partial p_i} &amp;= \frac{\partial −(ylog(p)+(1−y)log(1−p))}{\partial p_i} \\<br> &amp;= -\frac{\partial y_ilogp_i}{\partial p_i}-\frac{\partial (1-y_i)log(1-p_i)}{\partial p_i} \\<br> &amp;= -\frac{y_i}{p_i}-[(1-y_i)\cdot \frac{1}{1-p_i}\cdot (-1)] \\<br> &amp;= -\frac{y_i}{p_i}-\frac{1-y_i}{1-p_i} \\<br>\end{align}</p><h3 id="计算第二项：-frac-partial-p-i-partial-score-i"><a href="#计算第二项：-frac-partial-p-i-partial-score-i" class="headerlink" title="计算第二项：$\frac{\partial p_i}{\partial score_i}$"></a>计算第二项：$\frac{\partial p_i}{\partial score_i}$</h3><p>这一项要计算的是softmax函数对于score的导数，我们先回顾一下分数求导的公式：</p><blockquote><p>$$f(x) = \frac{g(x)}{h(x)}=\frac{g’(x)h(x)-g(x){h}’(x)}{h^2(x)}$$</p></blockquote><p>考虑$k$等于$i$的情况：</p><p>\begin{align}<br>\frac{\partial p_i}{\partial score_i} &amp;= \frac{({e^{y_i}})’\cdot (\sum_ie^{y_i})-e^{y_i}\cdot {(\sum_j e^{y_i})}’}{(\sum_je^{y_i})^2} \\<br> &amp;= \frac{e^{y_i}\cdot \sum_ie^{y_i}-{(e^{y_i})}^2}{(\sum_je^{y_i})^2} \\<br> &amp;= \frac{e^{y_i}}{\sum_je^{y_i}} - \frac{(e^{y_i})^2}{(\sum_je^{y_i})^2} \\<br> &amp;= \frac{e^{y_i}}{\sum_je^{y_i}}\cdot (1 - \frac{e^{y_i}}{\sum_je^{y_i}}) \\<br> &amp;= \sigma(y_i)(1-\sigma(y_i)) \\<br>\end{align}</p><p>考虑k不等于i的情况：</p><p>\begin{align}<br>\frac{\partial p_i}{\partial score_i} &amp;= \frac{(e^{y_k})’\cdot (\sum_ie^{y_i})-e^{y_i}\cdot {(\sum_j e^{y_i})}’}{(\sum_je^{y_i})^2} \\<br> &amp;= \frac{0\cdot \sum_ie^{y_i}-(e^{y_i})\cdot (e^{y_k})}{(\sum_je^{y_i})^2} \\<br> &amp;= -\frac{e^{y_i}\cdot e^{y_k}}{(\sum_je^{y_i})^2} \\<br> &amp;= -\frac{e^{y_i}}{\sum_je^{y_i} }\cdot \frac{e^{y_k} }{\sum_je^{y_i}} \\<br> &amp;= -\sigma(y_i)\cdot \sigma(y_k) \\<br>\end{align}</p><p>综上可得softmax损失函数的求导结果：</p><p>\begin{split}\frac{\partial pi}{\partial score_i}=\begin{cases} \sigma(y_i)(1-\sigma(y_i)) &amp; \text{$if\ j=k$} \\ -\sigma(y_i)\cdot \sigma(y_k) &amp; \text{$if\ j \neq k$}\end{cases}\end{split}</p><h3 id="计算结果-frac-partial-E-partial-score-i"><a href="#计算结果-frac-partial-E-partial-score-i" class="headerlink" title="计算结果$\frac{\partial E}{\partial score_i}$"></a>计算结果$\frac{\partial E}{\partial score_i}$</h3><p>\begin{align}<br>\frac{\partial E}{\partial score_i} &amp;= \frac{\partial E}{\partial p_i}\cdot \frac{\partial p_i}{\partial score_i} \\<br> &amp;= [-\frac{y_i}{\sigma(y_i)}-\cdot \frac{1-y_i}{1-\sigma(y_i)}]\cdot  \sigma(y_i)(1-\sigma(y_i) \\<br> &amp;= -\frac{c_i}{\sigma(y_i)}\cdot \sigma(y_i)\cdot (1-\sigma(y_i))+\frac{1-c_i}{1-\sigma(y_i)}\cdot \sigma(y_i)\cdot (1-\sigma(y_i)) \\<br> &amp;= -c_i+c_i\cdot \sigma(y_i)+\sigma(y_i)-c_i\cdot \sigma(y_i) \\<br> &amp;= \sigma(y_i)-c_i \\<br>\end{align}</p><p>可以看到，我们得到了一个非常漂亮的结果，所以，Cross Entropy损失函数，不仅可以很好的衡量模型的效果，又可以很容易的的进行求导计算。</p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>我们对结果进一步对参数求导：即$\frac{\partial E}{\partial w_i}=\frac{\partial E}{\partial score_i}\cdot \frac{\partial score_i}{\partial w_i}=x_i\cdot [\sigma(y_i)-c_i]$</p><p>在用梯度下降法做参数更新的时候，模型学习的速度取决于两个值：一、学习率；二、偏导值。其中，学习率是我们需要设置的超参数，所以我们重点关注偏导值。从上面的式子中，我们发现，偏导值的大小取决于$x_i$和$[\sigma(y_i)-c_i]$，我们重点关注后者，后者的值大小反映了我们模型的错误程度，该值越大，说明模型效果越差，但是该值越大同时也会使得模型学习速度更快。所以，用交叉熵当损失函数在模型效果差的时候学习速度比较快，在模型效果好的时候学习速度变慢，这是我们希望得到的。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1]. <a href="http://jackon.me/posts/why-use-cross-entropy-error-for-loss-function/" target="_blank" rel="noopener">神经网络的分类模型 LOSS 函数为什么要用 CROSS ENTROPY</a></p><p>[2]. <a href="http://sefiks.com/2017/11/08/softmax-as-a-neural-networks-activation-function/" target="_blank" rel="noopener">Softmax as a Neural Networks Activation Function</a></p><p>[3]. <a href="https://sefiks.com/2017/12/17/a-gentle-introduction-to-cross-entropy-loss-function/" target="_blank" rel="noopener">A Gentle Introduction to Cross-Entropy Loss Function</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章中，讨论的Cross Entropy损失函数常用于分类问题中，但是为什么它会在分类问题中这么有效呢？我们先从一个简单的分类例子来入手。&lt;/p&gt;
&lt;h1 id=&quot;预测政治倾向例子&quot;&gt;&lt;a href=&quot;#预测政治倾向例子&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Machine Learning" scheme="http://conghuai.me/categories/Machine-Learning/"/>
    
      <category term="Loss Function" scheme="http://conghuai.me/categories/Machine-Learning/Loss-Function/"/>
    
    
      <category term="math" scheme="http://conghuai.me/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>K-Means</title>
    <link href="http://conghuai.me/2017/12/07/K-Means/"/>
    <id>http://conghuai.me/2017/12/07/K-Means/</id>
    <published>2017-12-07T01:01:09.000Z</published>
    <updated>2018-04-09T08:06:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>​聚类，是机器学习的任务之一。同分类算法一样，聚类算法也被广泛的应用在各个领域，如根据话题，对文章、网页和搜索结果做聚类；根据社区发现对社交网络中的用户做聚类；根据购买历史记录对消费者做聚类。和分类算法不同的是，聚类算法的样本是没有标签的，也就是说，我们并不知道样本有哪些类别，算法需要根据样本的特征，对样本进行聚类，形成不同的聚类中心点。这篇文章，主要介绍比较著名的聚类算法——K-means算法。</p><p>​首先，我们看一下基于目标来做聚类的算法定义:</p><p><strong>Input</strong> : A set S of n points, also a distance/dissimilarity measure specifying the distance d(x, y) between pairs (x, y). </p><p><strong>Goal</strong>: output a partition of the data</p><p>​基于这个定义，选择不同的距离计算公式，有以下三种具体的算法:</p><ul><li><strong>k-means</strong>: find center partitions $c_1, c_2, …, c_k$ to minimize<br>$$ \sum min_{j \in{i, …,k}}d^2(x^i, c_j) $$</li><li><strong>k-median</strong>: find center partitions $c_1, c_2, …, c_k$ to minimize<br>$$ \sum min_{j \in{i, …,k}}d(x^i, c_j) $$ </li><li><strong>k-center</strong>: find partition to minimize the maximum radius</li></ul><h1 id="Euclidean-k-means-clustering"><a href="#Euclidean-k-means-clustering" class="headerlink" title="Euclidean k-means clustering"></a>Euclidean k-means clustering</h1><p>采用欧拉距离公式的k-means算法定义如下:</p><p><strong>Input</strong>: A set of n datapoints $x^1, x^2, …, x^n$ in $R^d$ (target #clusters k)</p><p><strong>Output</strong>: k representatives $c_1, c_2, …, c_k \in R^d$ </p><p><strong>Objective</strong>: choose $c_1, c_2, …, c_k \in R^d$ to minimize<br>$$ \sum min_{j \in {1,…,k}}||x^i - c_j||^2 $$</p><p>求解该算法的最优解是一个NP难的问题，所有我们没有办法获得最优解，当然，当k=1或d=1这种特殊情况下，是可以获得最优解，有兴趣的可以自行推导一下， 这里不在赘述，这里我们主要介绍Lloyd’s method[1]，该方法的核心算法如下:</p><p><strong>Input</strong>: A set of n datapoints $x^1, x^2, …, x^n$ in $R^d$</p><p><strong>Initialize</strong> centers $c_1, c_2, …, c_k \in R^d$ and clusters $C_1, C_2, …, C_k$ in any way.</p><p><strong>Repeat</strong> until there is no further change in the cost.</p><ol><li>For each j: $C_j \leftarrow {x \in S\ whose\ closest\ center\ is\ c_j}$</li><li>For each j: $c_j \leftarrow mean\ of\ C_j $</li></ol><p>对于该算法，难度不是特别大，最重要的地方在Repeat中的1，2两个步骤，其中，步骤1将固定住聚类中心$c_1, c_2, …, c_k$，更新聚类集$C_1, C_2, …, C_k$。步骤2固定住聚类集$C_1, C_2, …, C_k$，更新聚类中心$c_1, c_2, …, c_k$（本文用大写字符表示集合，这里用C指聚类簇；用小写字符表示单个点，这里用c指聚类中心。在本人的其他博文中，也会采用这种表述方式）。</p><p>大部分学习k-means算法的人理解了步骤1和步骤2就觉得已经理解了k-means了，其实不然，先不说k-means中比较重要的聚类中心的初始化问题，任何一个机器学习算法，它要是有效的，必须证明其可收敛，也需要给出其时间复杂度和空间复杂度。</p><h1 id="Converges"><a href="#Converges" class="headerlink" title="Converges"></a>Converges</h1><ul><li>目标函数的值在每一轮的迭代都会降低，这个特性由算法中步骤1和步骤2保证，因为对于每个样本点，我们每次都是选择最接近的聚类中心；而且，在每个聚类簇里，我们选择平均值作为其聚类中心。</li><li>目标函数有最小值0。</li></ul><p>由于目标函数有最小值，而且在每一轮中都是值都是减少的，所有算法必然会收敛。</p><h1 id="Running-Time"><a href="#Running-Time" class="headerlink" title="Running Time"></a>Running Time</h1><ul><li>O(nkd)  n为样本数 k为聚类中心数 d为维度</li></ul><h1 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h1><p>介绍完了整个算法过程、收敛性和时间复杂度之后，该算法的两个核心点需要我们思考: 1. 如何选择k的值; 2. 算法刚开始，并没有聚类中心，如何初始化聚类中心。对于问题1，我目前还没有过多的认识。这里主要介绍问题2，如何初始化聚类中心。</p><h2 id="Random-Initialization"><a href="#Random-Initialization" class="headerlink" title="Random Initialization"></a>Random Initialization</h2><p>这种初始化方式是最简单的方式，就是随机选k个点作为聚类中心，虽然简单，但是会存在问题，我们看下面的这个例子:</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010551.jpg" alt="random init"></p><p>由于，我们采用了随机初始化的方式，对于这个样本，我们随机初始化的三个点如上图的绿、红、黑三个样本点，再后面的迭代中，我们最后的聚类簇如上图的箭头所示，这样的效果好吗？显然是不好的，为什么呢？因为很显然最左边三个、中间三个、最右边三个应该是被归为一个聚类簇的:</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010534.jpg" alt="random init2"></p><p>我们可以看到，聚类中心初始化得不好，直接影响我们最后聚类的效果，可能上面举的例子样本分布和初始化聚类中心太极端，不能说明问题， 我们现在假设样本的分布是多个高斯分布的情况下，聚类中心初始化不好导致的最后聚类的效果:</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010548.jpg" alt="random init4"></p><p>我们现在计算一下假设有k个高斯分布，我们随机初始化正确的概率有大(所谓正确是指任何两个随机初始化中心不在同一个高斯分布中):$\frac {k!}{k^k} \approx \frac {1}{e^k}$，当k增大时，这个概率会越来越低。</p><h2 id="Furthest-Point-Heuristic"><a href="#Furthest-Point-Heuristic" class="headerlink" title="Furthest Point Heuristic"></a>Furthest Point Heuristic</h2><p>这种方法是一个中心点一个中心点依次进行初始化的，首先随机初始化$c_1$，然后选择距离$c_1$最远的点来初始化$c_2$，以此类推。</p><p>算法描述如下:</p><p>Choose $c_1$ arbitrarily (or at random).</p><p>For j = 2, …, k</p><p>Pick $c_j$ among datapoints $x^1, x^2, …, x^n$ that is farthest from previously chosen $c_1, c_2, …, c_{j-1}$</p><p>这种方法解决了随机初始化高斯分布例子中的问题:</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010552.jpg" alt="dist 1"></p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010546.jpg" alt="dist 2"></p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010549.jpg" alt="dist 3"></p><p>但是，这种方法的问题是容易受噪声点干扰，请看下面的例子:</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010545.jpg" alt="dist 4"></p><p>所以这种方式进行初始化也是不行的，一旦出现噪声点，就极大的影响了最后聚类的结果。虽然实际上，几乎没有哪一个k-means算法会采用上面两种初始化方式，但是这里这样介绍是顺着我们的思维方式进行的，一般思考的方式都是从简单到复杂，所以下面，我们也顺理成章的引出<code>k-means++</code>这个初始化算法， 该算法很好的反映出随机化思想在算法中的重要性。</p><h2 id="k-means"><a href="#k-means" class="headerlink" title="k-means++"></a>k-means++</h2><p>算法描述如下:</p><ul><li><p>Choose $c_1$ at random.</p></li><li><p>For j = 2, …, k</p></li><li><p>Pick $c_j$ among $x^1, x^2, …, x^n$ according to the distribution</p><p>  $ Pr(c_j = x^i) \propto min_{j’ &lt; j}\left | x^i - c_{j’} \right |^2 $</p></li></ul><p>这就是k-means++的初始化过程，这个过程比较不好理解。关于这个过程，作以下几点说明:</p><ul><li>这个初始化算法引入随机化，下一个被选为中心点的样本不是固定的，而是一个概率值，这个概率值正比于“离最近中心点的距离“。</li><li>”离最近中心点的距离“如何计算，实际上非常简单，就是当前样本距离各个中心点的距离中，最小的那个距离。</li><li>既然概率正比于 ”距离“ ，那么离群点的”距离“肯定是最大的，它的概率肯定是最大的，可是为什么算法不一定会选择它呢？举个例子说明，如果我们现在有一个聚类集合$S={x_1,x_2,x_3}$,和离群点$x_o$，假设选中 $x_o$的概率为 $1/3$ , 选中 $x_1, x_2, x_3$的概率分别为 $2/9$，这样看，即使$x_o$的概率很大，但是它只有1个，而 $x_1, x_2, x_3$ 即使每个概率不大，但是我们只要随便选中其中一个都是可以的(这是因为它们都在一个聚类簇中，只要选择聚类簇中任何一个点当聚类中心都可以)，所以可以把他们的概率相加，最后得到的概率就大于选中 $x_o$的概率。</li></ul><h1 id="In-Action"><a href="#In-Action" class="headerlink" title="In Action"></a>In Action</h1><p>当然，在实际项目中，我们可能不会自己实现<code>k-means</code>算法， 一般我们都会用现成的比较好的一些机器学习库，我们这里结合<code>scikit-learn</code>来看一下，它是如何实现<code>k-means</code>算法的。</p><p>首先看一下，<code>sklearn.cluster.k_means</code>模块下的函数<code>k_means</code>方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_means</span><span class="params">(X, n_clusters, init=<span class="string">'k-means++'</span>, precompute_distances=<span class="string">'auto'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            n_init=<span class="number">10</span>, max_iter=<span class="number">300</span>, verbose=False,</span></span></span><br><span class="line"><span class="function"><span class="params">            tol=<span class="number">1e-4</span>, random_state=None, copy_x=True, n_jobs=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            algorithm=<span class="string">"auto"</span>, return_n_iter=False)</span>:</span></span><br></pre></td></tr></table></figure><p>首先，我们看到参数有一个<code>init</code>，这里是指定k-means初始化方法，这里我们看下注释:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    init : &#123;'k-means++', 'random', or ndarray, or a callable&#125;, optional</span></span><br><span class="line"><span class="string">        Method for initialization, default to 'k-means++':</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        'k-means++' : selects initial cluster centers for k-mean</span></span><br><span class="line"><span class="string">        clustering in a smart way to speed up convergence. See section</span></span><br><span class="line"><span class="string">        Notes in k_init for more details.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        'random': generate k centroids from a Gaussian with mean and</span></span><br><span class="line"><span class="string">        variance estimated from the data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If an ndarray is passed, it should be of shape (n_clusters, n_features)</span></span><br><span class="line"><span class="string">        and gives the initial centers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If a callable is passed, it should take arguments X, k and</span></span><br><span class="line"><span class="string">        and a random state and return an initialization.</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>可以看到，<code>sklearn</code>实现了2种初始化算法，一个是随机初始化算法，另一个是<code>k-means++</code>算法，默认采用的是<code>k-means++</code>算法。然后，我们先看一下<code>sklearn</code>实现<code>k-means++</code>的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_k_init</span><span class="params">(X, n_clusters, x_squared_norms, random_state, n_local_trials=None)</span>:</span></span><br><span class="line">    <span class="string">"""Init n_clusters seeds according to k-means++</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    -----------</span></span><br><span class="line"><span class="string">    X : array or sparse matrix, shape (n_samples, n_features)</span></span><br><span class="line"><span class="string">        The data to pick seeds for. To avoid memory copy, the input data</span></span><br><span class="line"><span class="string">        should be double precision (dtype=np.float64).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n_clusters : integer</span></span><br><span class="line"><span class="string">        The number of seeds to choose</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    x_squared_norms : array, shape (n_samples,)</span></span><br><span class="line"><span class="string">        Squared Euclidean norm of each data point.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    random_state : numpy.RandomState</span></span><br><span class="line"><span class="string">        The generator used to initialize the centers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n_local_trials : integer, optional</span></span><br><span class="line"><span class="string">        The number of seeding trials for each center (except the first),</span></span><br><span class="line"><span class="string">        of which the one reducing inertia the most is greedily chosen.</span></span><br><span class="line"><span class="string">        Set to None to make the number of trials depend logarithmically</span></span><br><span class="line"><span class="string">        on the number of seeds (2+log(k)); this is the default.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Notes</span></span><br><span class="line"><span class="string">    -----</span></span><br><span class="line"><span class="string">    Selects initial cluster centers for k-mean clustering in a smart way</span></span><br><span class="line"><span class="string">    to speed up convergence. see: Arthur, D. and Vassilvitskii, S.</span></span><br><span class="line"><span class="string">    "k-means++: the advantages of careful seeding". ACM-SIAM symposium</span></span><br><span class="line"><span class="string">    on Discrete algorithms. 2007</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Version ported from http://www.stanford.edu/~darthur/kMeansppTest.zip,</span></span><br><span class="line"><span class="string">    which is the implementation used in the aforementioned paper.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    n_samples, n_features = X.shape</span><br><span class="line"></span><br><span class="line">    centers = np.empty((n_clusters, n_features), dtype=X.dtype)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> x_squared_norms <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>, <span class="string">'x_squared_norms None in _k_init'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set the number of local seeding trials if none is given</span></span><br><span class="line">    <span class="keyword">if</span> n_local_trials <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># This is what Arthur/Vassilvitskii tried, but did not report</span></span><br><span class="line">        <span class="comment"># specific results for other than mentioning in the conclusion</span></span><br><span class="line">        <span class="comment"># that it helped.</span></span><br><span class="line">        n_local_trials = <span class="number">2</span> + int(np.log(n_clusters))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Pick first center randomly</span></span><br><span class="line">    center_id = random_state.randint(n_samples)</span><br><span class="line">    <span class="keyword">if</span> sp.issparse(X):</span><br><span class="line">        centers[<span class="number">0</span>] = X[center_id].toarray()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        centers[<span class="number">0</span>] = X[center_id]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize list of closest distances and calculate current potential</span></span><br><span class="line">    closest_dist_sq = euclidean_distances(</span><br><span class="line">        centers[<span class="number">0</span>, np.newaxis], X, Y_norm_squared=x_squared_norms,</span><br><span class="line">        squared=<span class="keyword">True</span>)</span><br><span class="line">    current_pot = closest_dist_sq.sum()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Pick the remaining n_clusters-1 points</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>, n_clusters):</span><br><span class="line">        <span class="comment"># Choose center candidates by sampling with probability proportional</span></span><br><span class="line">        <span class="comment"># to the squared distance to the closest existing center</span></span><br><span class="line">        rand_vals = random_state.random_sample(n_local_trials) * current_pot</span><br><span class="line">        candidate_ids = np.searchsorted(stable_cumsum(closest_dist_sq),</span><br><span class="line">                                        rand_vals)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compute distances to center candidates</span></span><br><span class="line">        distance_to_candidates = euclidean_distances(</span><br><span class="line">            X[candidate_ids], X, Y_norm_squared=x_squared_norms, squared=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Decide which candidate is the best</span></span><br><span class="line">        best_candidate = <span class="keyword">None</span></span><br><span class="line">        best_pot = <span class="keyword">None</span></span><br><span class="line">        best_dist_sq = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">for</span> trial <span class="keyword">in</span> range(n_local_trials):</span><br><span class="line">            <span class="comment"># Compute potential when including center candidate</span></span><br><span class="line">            new_dist_sq = np.minimum(closest_dist_sq,</span><br><span class="line">                                     distance_to_candidates[trial])</span><br><span class="line">            new_pot = new_dist_sq.sum()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Store result if it is the best local trial so far</span></span><br><span class="line">            <span class="keyword">if</span> (best_candidate <span class="keyword">is</span> <span class="keyword">None</span>) <span class="keyword">or</span> (new_pot &lt; best_pot):</span><br><span class="line">                best_candidate = candidate_ids[trial]</span><br><span class="line">                best_pot = new_pot</span><br><span class="line">                best_dist_sq = new_dist_sq</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Permanently add best center candidate found in local tries</span></span><br><span class="line">        <span class="keyword">if</span> sp.issparse(X):</span><br><span class="line">            centers[c] = X[best_candidate].toarray()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            centers[c] = X[best_candidate]</span><br><span class="line">        current_pot = best_pot</span><br><span class="line">        closest_dist_sq = best_dist_sq</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> centers</span><br></pre></td></tr></table></figure><p>该算法的是基于 k-means++:the advantages of careful seeding[2]实现的，有兴趣的可以看一下这篇论文。代码第49行，可以看到，第一个初始中心是随机初始化的。代码62行，通过循环，依次初始化其他的聚类中心。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li>Lloyd, Stuart P. Least squares quantization in PCM[J]. IEEE Transactions on Information Theory, 1982, 28(2):129-137.</li><li>Arthur D, Vassilvitskii S. k-means++:the advantages of careful seeding[C]// Eighteenth Acm-Siam Symposium on Discrete Algorithms. Society for Industrial and Applied Mathematics, 2007:1027-1035.</li><li>Julyedu 机器学习算法班</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​聚类，是机器学习的任务之一。同分类算法一样，聚类算法也被广泛的应用在各个领域，如根据话题，对文章、网页和搜索结果做聚类；根据社区发现对社交网络中的用户做聚类；根据购买历史记录对消费者做聚类。和分类算法不同的是，聚类算法的样本是没有标签的，也就是说，我们并不知道样本有哪些类
      
    
    </summary>
    
      <category term="Machine Learning" scheme="http://conghuai.me/categories/Machine-Learning/"/>
    
      <category term="Cluster" scheme="http://conghuai.me/categories/Machine-Learning/Cluster/"/>
    
    
      <category term="algorithm" scheme="http://conghuai.me/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Perceptron Learning Algorithm</title>
    <link href="http://conghuai.me/2017/04/14/Perceptron-Learning-Algorithm/"/>
    <id>http://conghuai.me/2017/04/14/Perceptron-Learning-Algorithm/</id>
    <published>2017-04-14T07:25:03.000Z</published>
    <updated>2018-04-14T08:53:24.480Z</updated>
    
    <content type="html"><![CDATA[<p>感知机是二类分类的线性分类模型，其输入为实例的特征向量，输出为实例的类别，取+1和-1二值。感知机对应于输入空间（特征空间）中将实例划分为正负两类的分离超平面，属于判别模型。</p><h1 id="感知机模型"><a href="#感知机模型" class="headerlink" title="感知机模型"></a>感知机模型</h1><p>假设输入空间（特征空间）是$\chi \subseteq  R^n$，输出空间是$Y={+1, -1}$。输入$x\in \chi$表示实例的特征向量，对应于输入空间（特征空间）的点；输出为$y\in Y$表示实例的类别，由输入空间到输出空间的如下函数：</p><p>$$f(x) = sign(w\cdot x+b)$$</p><p>称为感知机。其中，$w$和$b$为感知机模型参数，$w\in R^n$称为权值向量，$b\in R$称为偏置，sign是符号函数，即：</p><p>$$\begin{split}sign(x)=\begin{cases} +1, &amp; \text{$x\geq 0$} \\ -1, &amp; \text{$x&lt;0$}\end{cases}\end{split}$$</p><p>感知机模型的假设空间是定义在特征空间中的所有线性分类模型，即函数集合$\{f|f(x)=w\cdot x + b\}$。</p><h2 id="几何解释"><a href="#几何解释" class="headerlink" title="几何解释"></a>几何解释</h2><p>线性方程$w\cdot x+b=0$，对应于特征空间$R^n$中的一个超平面$S$，其中$w$是超平面的法向量，$b$是超平面的截距。这个超平面将特征空间划分为两个部分，位于两部分的点分别被称为正、负两类。</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-14-084814.jpg" alt="Screen Shot 2018-04-14 at 16.14.35"></p><h1 id="学习策略"><a href="#学习策略" class="headerlink" title="学习策略"></a>学习策略</h1><p>假设训练数据集是线性可分的，感知机学习的目标是求得一个能够将训练集正实例点和负实例点完全正确分开的分离超平面。为了找出这样的超平面，即确定感知机模型参数$w,b$，需要确定一个学习策略，即定义（经验）损失函数并将损失函数极小化。</p><p>损失函数选择是误分类点到超平面$S$的总距离：</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-14-084817.jpg" alt="distance"></p><p>对于误分类的数据$(x_i,y_i)$来说，当$w\cdot x+b &gt;0$时，$y_i=-1$，而当$w\cdot x_i+b&lt;0$时，$y_i=+1$，则我们可以得出，误分类点$x_i$到超平面$S$的距离是：</p><p>$$-\frac{1}{||w||}y_i(w\cdot x_i+b)$$</p><p>这样，假设超平面$S$的误分类点集合为M，那么所有误分类点到超平面S的总距离为：</p><p>$$-\frac{1}{||w||}\sum _{x_i\in M}y_i(w\cdot x_i+b)$$</p><p>不考虑$\frac{1}{||w||}$，就得到感知机学习的损失函数：</p><p>$$L(w,b)=-\sum_{x_i \in M}y_i(w\cdot x_i+b)$$</p><h1 id="学习算法"><a href="#学习算法" class="headerlink" title="学习算法"></a>学习算法</h1><p>感知机学习算法是对以下最优化问题的算法那，给定一个训练数据集$T=\{(x_1, y_1),(x_2,y_2),…,(x_N,y_N)\}$，求参数$w,b$，使其为以下损失函数极小化问题的解：</p><p>$$min_{w,b} L(w,b)=-\sum_{x_i \in M}y_i(w\cdot x_i + b)$$</p><p>感知机学习算法是误分类驱动的，具体采用随机梯度下降法。首选，任意选取一个超平面$w_0,b_0$，然后用梯度下降法不断地极小化目标函数。极小化过程中不是一次使M中所有误分类点的梯度下降，而是一次随机选取一个误分类点使其梯度下降。</p><p>假设误分类点集合M是固定的，那么损失函数$L(w,b)$的梯度由</p><p>$$\triangledown_wL(w,b)=-\sum_{x_i\in M}y_ix_i$$</p><p>$$\triangledown_bL(w,b)=-\sum_{x_i\in M}y_i$$</p><p>给出，随机选择一个误分类点$(x_i, y_i)$，对$w,b$进行更新：</p><p>$$w\leftarrow w+\eta y_ix_i$$</p><p>$$b\leftarrow b+\eta y_i$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;感知机是二类分类的线性分类模型，其输入为实例的特征向量，输出为实例的类别，取+1和-1二值。感知机对应于输入空间（特征空间）中将实例划分为正负两类的分离超平面，属于判别模型。&lt;/p&gt;
&lt;h1 id=&quot;感知机模型&quot;&gt;&lt;a href=&quot;#感知机模型&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Machine Learning" scheme="http://conghuai.me/categories/Machine-Learning/"/>
    
      <category term="Classification" scheme="http://conghuai.me/categories/Machine-Learning/Classification/"/>
    
    
      <category term="ml" scheme="http://conghuai.me/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>网页正文抽取算法</title>
    <link href="http://conghuai.me/2016/10/05/%E7%BD%91%E9%A1%B5%E6%AD%A3%E6%96%87%E6%8A%BD%E5%8F%96%E7%AE%97%E6%B3%95/"/>
    <id>http://conghuai.me/2016/10/05/网页正文抽取算法/</id>
    <published>2016-10-05T07:51:56.000Z</published>
    <updated>2018-04-09T05:47:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在爆炸式增长的互联网时代，互联网上有大量的资源，如何爬取这些资源成为一个热门的研究点。其中如何高效的对网页正文进行抽取、清洗和存储成为一个重要的研究领域。但是，在网页上，除了正文部分，通常还会包含大量的导航栏、广告、版权等信息。相较于正文，这些信息对于我们来说用处不是很大，这部分信息，在网页正文抽取中，被称为噪声信息。为了提高网页正文采集的性能，我们需要把这这些噪声去除。</p><p>在这篇博文中，会介绍几个比较经典、效果也比较好的算法，一是<strong>CETD：Content Extraction via Text Density</strong>；二是<strong>CETR：Content Extraction via Tag Ratios。</strong>三是<strong>CEPR：Content Extraction via Path Ratios</strong>。</p><h1 id="CETD：Content-Extraction-via-Text-Density"><a href="#CETD：Content-Extraction-via-Text-Density" class="headerlink" title="CETD：Content Extraction via Text Density"></a>CETD：Content Extraction via Text Density</h1><p>该算法是主要思想是：在典型的网页结构中，噪声信息（指正文信息以外）通常被高度格式化，因此包含的文本信息通常很少，而正文通常包含大量文本。而且，正文通常在页面中保持完整性，即其内容通常不会被分到多个DOM树节点中。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>没有对页面结构作任何假设。</li><li>保持原页面的信息。</li></ul><h2 id="Text-Density"><a href="#Text-Density" class="headerlink" title="Text Density"></a>Text Density</h2><ul><li>CharNumber：该节点下所有子树中的字符数；</li><li>TagNumber：该节点下所有子树的标签数；</li></ul><p>定义Text Density为：$TD_i=\frac{C_i}{T_i}$,$C_i$表示CharNumber，$T_i$表示TagNumber，当$T_i$为0时，将其设置为1。通常来说，该值越高，该节点内容越有可能是正文。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Algorithm <span class="number">1</span> <span class="function">Pseudocode of <span class="title">ComputeDensity</span><span class="params">(N)</span></span></span><br><span class="line">1: INPUT: N </span><br><span class="line"><span class="number">2</span>: OUTPUT: N </span><br><span class="line"><span class="number">3</span>: <span class="keyword">for</span> all child node C in N <span class="keyword">do</span> </span><br><span class="line"><span class="number">4</span>:    ComputeDensity(C)</span><br><span class="line"><span class="number">5</span>: end <span class="keyword">for</span> </span><br><span class="line"><span class="number">6</span>: N.CharNumber ←CountChar(N) </span><br><span class="line"><span class="number">7</span>: N.TagNumber ←CountTag(N) </span><br><span class="line"><span class="number">8</span>: <span class="keyword">if</span> N.TagNumber == <span class="number">0</span> then </span><br><span class="line"><span class="number">9</span>:    N.TagNumber ←<span class="number">1</span></span><br><span class="line"><span class="number">10</span>: end <span class="keyword">if</span> <span class="number">11</span>: N.Density ←N.CharNumber/N.TagNumber</span><br></pre></td></tr></table></figure><h2 id="Composite-Text-Density"><a href="#Composite-Text-Density" class="headerlink" title="Composite Text Density"></a>Composite Text Density</h2><p>在Text Density的基础上加了关于超链接的统计信息。论文作者经过研究发现，大部分的噪声节点中都包含超链接，这个信息可以用来进一步判断该节点内容是正文还是噪声。基于这个发现，定义另外两个统计信息：</p><ul><li>LinkCharNumber：该节点下所有子树中的超链接字符数；</li><li>LinkTagNumber：该节点下所有子树中的超链接标签数；</li></ul><p>定义Composite Text Density为：$CTD_i=\frac{C_i}{T_i}log_{ln(\frac{C_i}{-LC_i}LC_i+\frac{LC_b}{C_b}C_i+e)}(\frac{C_i}{LC_i}\frac{T_i}{LT_i})$</p><ul><li>$C_i$：字符数；</li><li>$T_i$：标签数</li><li>$LC_i$：链接字符；</li><li>$-LC_i$：非链接字符；</li><li>$LT_i$：链接标签；</li><li>$LC_b$：<code>&lt;body&gt;</code>标签下的超链接字符数</li><li>$C_b$：<code>&lt;body&gt;</code>标签下的字符数</li></ul><h2 id="Content-Extraction"><a href="#Content-Extraction" class="headerlink" title="Content Extraction"></a>Content Extraction</h2><p>通过计算每个节点的TD或CTD，我们可以根据该值来判断是否抽取该节点下的文本当做正文，判断方式就是设置一个阈值，如果大于该阈值就抽取，小于该阈值就不抽取。论文作者用了一个非常巧妙的值当做阈值，即<code>&lt;body&gt;</code>的Text Density。</p><h2 id="DensitySum"><a href="#DensitySum" class="headerlink" title="DensitySum"></a>DensitySum</h2><p>在实践中发现，有一些正文包含的Text Density值很低，如正文的日期，正文的引用等。论文作者发现，一般来说，正文块都是属于DOM树中的某个祖先节点的，又因为正文节点的text density大于噪声节点，所以正文块对应的节点，如果把它所有孩子的text densities相加，将会得到最大的text densities值。从而可以通过DensitySum可以解决该问题，定义DensitySum为：$DensitySum_N=\sum_{i\in C}TextDensity_i$，$C$是N的孩子集合。<br>在算法的具体实现中，如果网页只包含一个content block，我们只需要在<code>&lt;body&gt;</code>标签下寻找最大的DensitySum，然后将其标记为content即可。对于有多个content block的情况，我们需要对于text density大于阈值的所有节点，都用上述方法进行抽取。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Algorithm <span class="number">2</span> <span class="function">Pseudocode of <span class="title">ExtractContent</span><span class="params">(N)</span></span></span><br><span class="line">1: INPUT: N </span><br><span class="line"><span class="number">2</span>: <span class="keyword">if</span> N.TextDensity &gt;= threshold then </span><br><span class="line"><span class="number">3</span>:       T ←FindMaxDensitySumTag(N)</span><br><span class="line"><span class="number">4</span>:       MarkContent(T) </span><br><span class="line"><span class="number">5</span>:       <span class="keyword">for</span> all child node C in N <span class="keyword">do</span></span><br><span class="line"><span class="number">6</span>:          ExtractContent(C)</span><br><span class="line"><span class="number">7</span>:       end <span class="keyword">for</span></span><br><span class="line"><span class="number">8</span>: end <span class="keyword">if</span></span><br></pre></td></tr></table></figure><p>上面说过，论文作者将<code>&lt;body&gt;</code>标签的text density当做是阈值，但是在实践中，有一些content block的text density会低于该阈值，这会导致正文内容的丢失。为了解决这一问题，先把阈值设为0，然后找到最大的DensitySum的标签。紧接着，从<code>&lt;body&gt;</code>标签到该标签路径上，将最小的text density值设为阈值。</p><h1 id="CEPR：Content-Extraction-via-Path-Ratios"><a href="#CEPR：Content-Extraction-via-Path-Ratios" class="headerlink" title="CEPR：Content Extraction via Path Ratios"></a>CEPR：Content Extraction via Path Ratios</h1><p>该算法能够通过$TPR/ETPR$直方图快速、准确的从网页中提取新闻内容。</p><h2 id="Document-Object-Model"><a href="#Document-Object-Model" class="headerlink" title="Document Object Model"></a>Document Object Model</h2><p><img src="https://github.com/conghuaicai/cs-skill-tree/raw/master/spider/web%20content%20extraction/images/1.png" alt="文档树"></p><h2 id="Extended-Labeled-Ordered-Tree"><a href="#Extended-Labeled-Ordered-Tree" class="headerlink" title="Extended Labeled Ordered Tree"></a>Extended Labeled Ordered Tree</h2><p>正文和噪声的主要区别有：</p><ol><li>正文通常只包含在一个部分中，但是噪声信息在很多部分中都会出现；</li><li>正文通常都有相同的tag paths；</li></ol><p><strong>定义：</strong></p><ul><li>$L={l_0,l_1,l_2,…}$,$l_i$表示标记，即tag；</li><li>$T=(V,E,v_0,\prec ,L,l(\cdot),c(\cdot))$<ul><li>$l:V\rightarrow L$是label function，即求出节点所属的标签$l(v)$；</li><li>$c：V\rightarrow String$是content function，即求出节点的本文内容$c(v)$；</li></ul></li></ul><h2 id="Tag-Path"><a href="#Tag-Path" class="headerlink" title="Tag Path"></a>Tag Path</h2><p>$l(v_0),l(v_1)…l(v_k)$称为节点v的tag path，表示为$path(v)$。</p><h2 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h2><ol><li>正文节点有相似的tag paths；</li><li>噪声节点有相似的tag paths；</li><li>正文节点包含更多的文本数据；</li><li>噪声节点包含更少的文本数据；</li><li>所有的节点都是叶子节点；</li></ol><h2 id="Text-to-Tag-Path-Ratio"><a href="#Text-to-Tag-Path-Ratio" class="headerlink" title="Text to Tag Path Ratio"></a>Text to Tag Path Ratio</h2><ul><li><strong>pathNum</strong>：tag path在tree T中出现的次数，这个概念比较容易造成误解，现在的理解是，叶节点是不算在tag path里面的。tag path是一个tag序列标识，tag下可能包含多个叶节点，这些叶结点对应的tag path就是一样的，所以这个序列标识是有可能重复的。</li><li><strong>txtNum</strong>：节点中所有字符的个数；</li><li>$accNodes(p)={v_p^1,v_p^2,…,v_p^m}$是tag path p上可访问的节点的集合；</li><li><strong>Text to Tag Path Radio：</strong>$TPR(p)=\frac{\sum_{v\in accNodes(p)}length(c(v))}{|accNodes(p)|}$<ul><li>对于包含长文本的路径，该值很高；</li><li>对于其他路径，该值很低；</li></ul></li></ul><p>举例子说明：</p><p>上述文档图的TPR计算方式如下:</p><ol><li>#1 text node : <code>tag path = &lt;div.div.div.h1&gt;</code>，txtNum = 40, pathNum=1, TPR=40；</li><li>#2 text node: <code>tag path = &lt;div.div.div.p&gt;</code>，txtNum=645，pathNum=2(因为这个序列出现两次)，TPR=322.5；</li><li>#3 text node: <code>tag path=&lt;div.div.div.p.a&gt;</code>，txtNum=7，pathNum=1，TPR=7；</li><li>#4 text node: <code>tag path=&lt;div.div.div.p&gt;</code>，txtNum=645，pathNum=2，TPR=322.5；</li></ol><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p><img src="https://github.com/conghuaicai/cs-skill-tree/raw/master/spider/web%20content%20extraction/images/2.png" alt="算法流程"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] Sun, F., Song, D., &amp; Liao, L. (2011). DOM based content extraction via text density. Proceedings of the 34th International ACM SIGIR Conference on Research and Development in Information - SIGIR ’11, l, 245. </p><p>[2] Wu, G., Li, L., Hu, X., &amp; Wu, X. (2013). Web news extraction via path ratios. Proceedings of the 22nd ACM International Conference on Conference on Information &amp; Knowledge Management - CIKM ’13, 2059–2068.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在爆炸式增长的互联网时代，互联网上有大量的资源，如何爬取这些资源成为一个热门的研究点。其中如何高效的对网页正文进行抽取、清洗和存储成为一个重要的研究领域。但是，在网页上，除了正文部分，通常还会包含大量的导航栏、广告、版权等信息。相较于正文，这些信息对于我们来说用处不是很大，
      
    
    </summary>
    
      <category term="Spider" scheme="http://conghuai.me/categories/Spider/"/>
    
      <category term="Content Extraction" scheme="http://conghuai.me/categories/Spider/Content-Extraction/"/>
    
    
      <category term="algorithm" scheme="http://conghuai.me/tags/algorithm/"/>
    
  </entry>
  
</feed>
