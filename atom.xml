<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蔡聪怀</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-08T07:49:34.668Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Conghuai Cai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cross Entropy Loss Function</title>
    <link href="http://yoursite.com/2018/04/08/Cross%20Entropy%20Loss%20Function/"/>
    <id>http://yoursite.com/2018/04/08/Cross Entropy Loss Function/</id>
    <published>2018-04-08T02:54:16.000Z</published>
    <updated>2018-04-08T07:49:34.668Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章中，讨论的Cross Entropy损失函数常用于分类问题中，但是为什么它会在分类问题中这么有效呢？我们先从一个简单的分类例子来入手。</p><h1 id="预测政治倾向例子"><a href="#预测政治倾向例子" class="headerlink" title="预测政治倾向例子"></a>预测政治倾向例子</h1><p>我们希望根据一个人的年龄、性别、年收入等相互独立的特征，来预测一个人的政治倾向，有三种可预测结果：民主党、共和党、其他党。假设我们当前有两个模型，这两个模型最后输出都是通过softmax的方式得到对于每个预测结果的概率：</p><p><strong>模型1</strong>：</p><table><thead><tr><th style="text-align:center">COMPUTED</th><th style="text-align:center">TARGETS</th><th style="text-align:center">CORRECT?</th></tr></thead><tbody><tr><td style="text-align:center">0.3 0.3 0.4</td><td style="text-align:center">0 0 1（民主党）</td><td style="text-align:center">正确</td></tr><tr><td style="text-align:center">0.3 0.4 0.3</td><td style="text-align:center">0 1 0（共和党）</td><td style="text-align:center">正确</td></tr><tr><td style="text-align:center">0.1 0.2 0.7</td><td style="text-align:center">1 0 0 （其他党）</td><td style="text-align:center">错误</td></tr></tbody></table><p><strong>模型1</strong>对于样本1和样本2以非常微弱的优势判断正确，对于样本3的判断则彻底错误。</p><p><strong>模型2</strong>：</p><table><thead><tr><th style="text-align:center">COMPUTED</th><th style="text-align:center">TARGETS</th><th style="text-align:center">CORRECT?</th></tr></thead><tbody><tr><td style="text-align:center">0.1 0.2 0.7</td><td style="text-align:center">0 0 1（民主党）</td><td style="text-align:center">正确</td></tr><tr><td style="text-align:center">0.1 0.7 0.2</td><td style="text-align:center">0 1 0（共和党）</td><td style="text-align:center">正确</td></tr><tr><td style="text-align:center">0.3 0.4 0.3</td><td style="text-align:center">1 0 0 （其他党）</td><td style="text-align:center">错误</td></tr></tbody></table><p><strong>模型2</strong>对于样本1和样本2判断非常准确，对于样本3判断错误，但是相对来说没有错得太离谱。</p><p>好了，有了模型之后，我们需要通过定义损失函数来判断模型在样本上的表现了，那么我们可以定义哪些损失函数呢？</p><h2 id="Classification-Error（分类错误率）"><a href="#Classification-Error（分类错误率）" class="headerlink" title="Classification Error（分类错误率）"></a>Classification Error（分类错误率）</h2><p>最为直接的损失函数定义为：$classification\ error=\frac{count\ of\ error\ items}{count\ of \ all\ items}$</p><p><strong>模型1：</strong>$classification\ error=\frac{1}{3}$</p><p><strong>模型2：</strong>$classification\ error=\frac{1}{3}$</p><p>我们知道，<strong>模型1</strong>和<strong>模型2</strong>虽然都是预测错了1个，但是相对来说<strong>模型2</strong>表现的更好，损失函数值照理来说应该更小，但是，很遗憾的是，$classification\ error$并不能判断出来，所以这种损失函数虽然好理解，但表现不太好。</p><h2 id="Mean-Squared-Error-平方和"><a href="#Mean-Squared-Error-平方和" class="headerlink" title="Mean Squared Error (平方和)"></a>Mean Squared Error (平方和)</h2><p>平方和损失也是一种比较常见的损失函数，其定义为：$MSE=\frac{1}{n}\sum_{i}^n(\hat{y_i}-y_i)$</p><p><strong>模型1：</strong>$MSE=\frac{0.54+0.54+1.34}{3}=0.81$</p><p><strong>模型2：</strong>$MSE=\frac{0.14+0.14+0.74}{3}=0.34$</p><p>MSE能够判断出来<strong>模型2</strong>优于<strong>模型1</strong>，那为什么不采样这种损失函数呢？原因在于，使用该损失函数时，得到的表达式是非凸函数，有很多局部的极值点。在做优化的时候不太好处理。</p><p>有了上面的直观分析，我们可以清楚的看到，对于分类问题的损失函数来说，分类错误率和平方和损失都不是很好的损失函数，下面我们来看一下交叉熵损失函数是怎么解决这个问题的。</p><h1 id="Cross-Entropy-Error-Function"><a href="#Cross-Entropy-Error-Function" class="headerlink" title="Cross Entropy Error Function"></a>Cross Entropy Error Function</h1><p>交叉熵损失函数经常用于分类问题中，特别是在神经网络做分类问题时，也经常使用交叉熵作为损失函数，此外，由于交叉熵涉及到计算每个类别的概率，所以交叉熵几乎每次都和softmax函数一起出现。</p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h3 id="二分类"><a href="#二分类" class="headerlink" title="二分类"></a>二分类</h3><p>在二分的情况下，模型最后需要预测的结果只有两种情况，对于每个类别我们的预测得到的概率为$p$和$1-p$。此时表达式为：$−(ylog(p)+(1−y)log(1−p))$</p><h3 id="多分类"><a href="#多分类" class="headerlink" title="多分类"></a>多分类</h3><p>多分类的情况实际上就是对二分类的扩展：$-\sum_{c=1}^My_{o,c}\log(p_{o,c})$</p><p>其中：</p><ul><li>$M$——类别的数量；</li><li>$y$——指示变量（0或1）,如果该类别和样本观测到的类别相同就是1，否则是0；</li><li>$p$——对于观测样本属于类别c的预测概率。</li></ul><h2 id="函数图像"><a href="#函数图像" class="headerlink" title="函数图像"></a>函数图像</h2><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-08-024353.jpg" alt="cross_entropy"></p><p>可以看出，该函数是凸函数，求导时能够得到全局最优值。</p><h2 id="求导"><a href="#求导" class="headerlink" title="求导"></a>求导</h2><p>我们用神经网络最后一层输出的情况，来看一眼整个模型预测及获得损失的的流程：</p><ol><li>神经网络最后一层得到每个类别的得分<strong>scores</strong>；</li><li>该得分经过softmax转换为概率输出；</li><li>模型预测的类别概率输出与真实类别的one hot形式进行cross entropy损失函数的计算。</li></ol><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-08-064410.jpg" alt="Screen Shot 2018-04-08 at 11.56.55"></p><p>下面，我们以二分类的情形来推导一下整个求导公式：</p><p>$$\frac{\partial E}{\partial score_i}=\frac{\partial E}{\partial p_i}\cdot \frac{\partial p_i}{\partial score_i}$</p><p>我们将上述拆成两项偏导的乘积。</p><h3 id="计算第一项：-frac-partial-E-partial-p-i"><a href="#计算第一项：-frac-partial-E-partial-p-i" class="headerlink" title="计算第一项：$\frac{\partial E}{\partial p_i}$"></a>计算第一项：$\frac{\partial E}{\partial p_i}$</h3><p>$$\frac{\partial E}{\partial p_i}=\frac{\partial −(ylog(p)+(1−y)log(1−p))}{\partial p_i}$$</p><p>​     $$= -\frac{\partial y_ilogp_i}{\partial p_i}-\frac{\partial (1-y_i)log(1-p_i)}{\partial p_i}$$</p><p>​     $$= -\frac{y_i}{p_i}-[(1-y_i)\cdot \frac{1}{1-p_i}\cdot (-1)]$$</p><p>​     $$= -\frac{y_i}{p_i}-\frac{1-y_i}{1-p_i}$$</p><h3 id="计算第二项：-frac-partial-p-i-partial-score-i"><a href="#计算第二项：-frac-partial-p-i-partial-score-i" class="headerlink" title="计算第二项：$\frac{\partial p_i}{\partial score_i}$"></a>计算第二项：$\frac{\partial p_i}{\partial score_i}$</h3><p>这一项要计算的是softmax函数对于score的导数，我们先回顾一下分数求导的公式：</p><blockquote><p>$$f(x) = \frac{g(x)}{h(x)}=\frac{g’(x)h(x)-g(x){h}’(x)}{h^2(x)}$$</p></blockquote><p>考虑$k$等于$i$的情况：</p><p>$$\frac{\partial p_i}{\partial score_i}=\frac{({e^{y_i}})’\cdot (\sum_ie^{y_i})-e^{y_i}\cdot {(\sum_j e^{y_i})}’}{(\sum_je^{y_i})^2}$$</p><p>​          $$= \frac{e^{y_i}\cdot \sum_ie^{y_i}-{(e^{y_i})}^2}{(\sum_je^{y_i})^2}$$</p><p>​          $$= \frac{e^{y_i}}{\sum_je^{y_i}} - \frac{(e^{y_i})^2}{(\sum_je^{y_i})^2}$$</p><p>​          $$= \frac{e^{y_i}}{\sum_je^{y_i}}\cdot (1 - \frac{e^{y_i}}{\sum_je^{y_i}})$$</p><p>​          $$= \sigma(y_i)(1-\sigma(y_i))$$</p><p>考虑k不等于i的情况：</p><p>$$\frac{\partial p_i}{\partial score_i}=\frac{(e^{y_k})’\cdot (\sum_ie^{y_i})-e^{y_i}\cdot {(\sum_j e^{y_i})}’}{(\sum_je^{y_i})^2}$$</p><p>​          $$= \frac{0\cdot \sum_ie^{y_i}-(e^{y_i})\cdot (e^{y_k})}{(\sum_je^{y_i})^2}$$</p><p>​          $$= -\frac{e^{y_i}\cdot e^{y_k}}{(\sum_je^{y_i})^2}$$</p><p>​          $$= -\frac{e^{y_i}}{\sum_je^{y_i} }\cdot \frac{e^{y_k} }{\sum_je^{y_i} }$$</p><p>​          $$= -\sigma(y_i)\cdot \sigma(y_k)$$</p><p>综上可得softmax损失函数的求导结果：</p><p>$$if\ j=k, \sigma(y_i)(1-\sigma(y_i))$$<br>$$if\ j \neq k, -\sigma(y_i)\cdot \sigma(y_k)$$</p><h3 id="计算结果-frac-partial-E-partial-score-i"><a href="#计算结果-frac-partial-E-partial-score-i" class="headerlink" title="计算结果$\frac{\partial E}{\partial score_i}$"></a>计算结果$\frac{\partial E}{\partial score_i}$</h3><p>$$\frac{\partial E}{\partial score_i}= \frac{\partial E}{\partial p_i}\cdot \frac{\partial p_i}{\partial score_i} $$<br>$$ =[-\frac{y_i}{\sigma(y_i)}-\cdot \frac{1-y_i}{1-\sigma(y_i)}]\cdot  \sigma(y_i)(1-\sigma(y_i)$$<br>$$ =-\frac{c_i}{\sigma(y_i)}\cdot \sigma(y_i)\cdot (1-\sigma(y_i))+\frac{1-c_i}{1-\sigma(y_i)}\cdot \sigma(y_i)\cdot (1-\sigma(y_i))$$<br>$$ = -c_i+c_i\cdot \sigma(y_i)+\sigma(y_i)-c_i\cdot \sigma(y_i)$$<br>$$ =\sigma(y_i)-c_i$$</p><p>可以看到，我们得到了一个非常漂亮的结果，所以，Cross Entropy损失函数，不仅可以很好的衡量模型的效果，又可以很容易的的进行求导计算。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1]. <a href="http://jackon.me/posts/why-use-cross-entropy-error-for-loss-function/" target="_blank" rel="noopener">神经网络的分类模型 LOSS 函数为什么要用 CROSS ENTROPY</a></p><p>[2]. <a href="http://sefiks.com/2017/11/08/softmax-as-a-neural-networks-activation-function/" target="_blank" rel="noopener">Softmax as a Neural Networks Activation Function</a></p><p>[3]. <a href="https://sefiks.com/2017/12/17/a-gentle-introduction-to-cross-entropy-loss-function/" target="_blank" rel="noopener">A Gentle Introduction to Cross-Entropy Loss Function</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章中，讨论的Cross Entropy损失函数常用于分类问题中，但是为什么它会在分类问题中这么有效呢？我们先从一个简单的分类例子来入手。&lt;/p&gt;
&lt;h1 id=&quot;预测政治倾向例子&quot;&gt;&lt;a href=&quot;#预测政治倾向例子&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
      <category term="Loss Function" scheme="http://yoursite.com/categories/Machine-Learning/Loss-Function/"/>
    
    
      <category term="math" scheme="http://yoursite.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>网页正文抽取算法</title>
    <link href="http://yoursite.com/2018/04/05/%E7%BD%91%E9%A1%B5%E6%AD%A3%E6%96%87%E6%8A%BD%E5%8F%96%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/05/网页正文抽取算法/</id>
    <published>2018-04-05T07:51:56.000Z</published>
    <updated>2018-04-05T09:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>在爆炸式增长的互联网时代，互联网上有大量的资源，如何爬取这些资源成为一个热门的研究点。其中如何高效的对网页正文进行抽取、清洗和存储成为一个重要的研究领域。但是，在网页上，除了正文部分，通常还会包含大量的导航栏、广告、版权等信息。相较于正文，这些信息对于我们来说用处不是很大，这部分信息，在网页正文抽取中，被称为噪声信息。为了提高网页正文采集的性能，我们需要把这这些噪声去除。</p><p>在这篇博文中，会介绍几个比较经典、效果也比较好的算法，一是<strong>CETD：Content Extraction via Text Density</strong>；二是<strong>CETR：Content Extraction via Tag Ratios。</strong>三是<strong>CEPR：Content Extraction via Path Ratios</strong>。</p><h1 id="CETD：Content-Extraction-via-Text-Density"><a href="#CETD：Content-Extraction-via-Text-Density" class="headerlink" title="CETD：Content Extraction via Text Density"></a>CETD：Content Extraction via Text Density</h1><p>该算法是主要思想是：在典型的网页结构中，噪声信息（指正文信息以外）通常被高度格式化，因此包含的文本信息通常很少，而正文通常包含大量文本。而且，正文通常在页面中保持完整性，即其内容通常不会被分到多个DOM树节点中。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>没有对页面结构作任何假设。</li><li>保持原页面的信息。</li></ul><h2 id="Text-Density"><a href="#Text-Density" class="headerlink" title="Text Density"></a>Text Density</h2><ul><li>CharNumber：该节点下所有子树中的字符数；</li><li>TagNumber：该节点下所有子树的标签数；</li></ul><p>定义Text Density为：$TD_i=\frac{C_i}{T_i}$,$C_i$表示CharNumber，$T_i$表示TagNumber，当$T_i$为0时，将其设置为1。通常来说，该值越高，该节点内容越有可能是正文。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Algorithm <span class="number">1</span> <span class="function">Pseudocode of <span class="title">ComputeDensity</span><span class="params">(N)</span></span></span><br><span class="line">1: INPUT: N </span><br><span class="line"><span class="number">2</span>: OUTPUT: N </span><br><span class="line"><span class="number">3</span>: <span class="keyword">for</span> all child node C in N <span class="keyword">do</span> </span><br><span class="line"><span class="number">4</span>:    ComputeDensity(C)</span><br><span class="line"><span class="number">5</span>: end <span class="keyword">for</span> </span><br><span class="line"><span class="number">6</span>: N.CharNumber ←CountChar(N) </span><br><span class="line"><span class="number">7</span>: N.TagNumber ←CountTag(N) </span><br><span class="line"><span class="number">8</span>: <span class="keyword">if</span> N.TagNumber == <span class="number">0</span> then </span><br><span class="line"><span class="number">9</span>:    N.TagNumber ←<span class="number">1</span></span><br><span class="line"><span class="number">10</span>: end <span class="keyword">if</span> <span class="number">11</span>: N.Density ←N.CharNumber/N.TagNumber</span><br></pre></td></tr></table></figure><h2 id="Composite-Text-Density"><a href="#Composite-Text-Density" class="headerlink" title="Composite Text Density"></a>Composite Text Density</h2><p>在Text Density的基础上加了关于超链接的统计信息。论文作者经过研究发现，大部分的噪声节点中都包含超链接，这个信息可以用来进一步判断该节点内容是正文还是噪声。基于这个发现，定义另外两个统计信息：</p><ul><li>LinkCharNumber：该节点下所有子树中的超链接字符数；</li><li>LinkTagNumber：该节点下所有子树中的超链接标签数；</li></ul><p>定义Composite Text Density为：$CTD_i=\frac{C_i}{T_i}log_{ln(\frac{C_i}{-LC_i}LC_i+\frac{LC_b}{C_b}C_i+e)}(\frac{C_i}{LC_i}\frac{T_i}{LT_i})$</p><ul><li>$C_i$：字符数；</li><li>$T_i$：标签数</li><li>$LC_i$：链接字符；</li><li>$-LC_i$：非链接字符；</li><li>$LT_i$：链接标签；</li><li>$LC_b$：<code>&lt;body&gt;</code>标签下的超链接字符数</li><li>$C_b$：<code>&lt;body&gt;</code>标签下的字符数</li></ul><h2 id="Content-Extraction"><a href="#Content-Extraction" class="headerlink" title="Content Extraction"></a>Content Extraction</h2><p>通过计算每个节点的TD或CTD，我们可以根据该值来判断是否抽取该节点下的文本当做正文，判断方式就是设置一个阈值，如果大于该阈值就抽取，小于该阈值就不抽取。论文作者用了一个非常巧妙的值当做阈值，即<code>&lt;body&gt;</code>的Text Density。</p><h2 id="DensitySum"><a href="#DensitySum" class="headerlink" title="DensitySum"></a>DensitySum</h2><p>在实践中发现，有一些正文包含的Text Density值很低，如正文的日期，正文的引用等。论文作者发现，一般来说，正文块都是属于DOM树中的某个祖先节点的，又因为正文节点的text density大于噪声节点，所以正文块对应的节点，如果把它所有孩子的text densities相加，将会得到最大的text densities值。从而可以通过DensitySum可以解决该问题，定义DensitySum为：$DensitySum_N=\sum_{i\in C}TextDensity_i$，$C$是N的孩子集合。<br>在算法的具体实现中，如果网页只包含一个content block，我们只需要在<code>&lt;body&gt;</code>标签下寻找最大的DensitySum，然后将其标记为content即可。对于有多个content block的情况，我们需要对于text density大于阈值的所有节点，都用上述方法进行抽取。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Algorithm <span class="number">2</span> <span class="function">Pseudocode of <span class="title">ExtractContent</span><span class="params">(N)</span></span></span><br><span class="line">1: INPUT: N </span><br><span class="line"><span class="number">2</span>: <span class="keyword">if</span> N.TextDensity &gt;= threshold then </span><br><span class="line"><span class="number">3</span>:       T ←FindMaxDensitySumTag(N)</span><br><span class="line"><span class="number">4</span>:       MarkContent(T) </span><br><span class="line"><span class="number">5</span>:       <span class="keyword">for</span> all child node C in N <span class="keyword">do</span></span><br><span class="line"><span class="number">6</span>:          ExtractContent(C)</span><br><span class="line"><span class="number">7</span>:       end <span class="keyword">for</span></span><br><span class="line"><span class="number">8</span>: end <span class="keyword">if</span></span><br></pre></td></tr></table></figure><p>上面说过，论文作者将<code>&lt;body&gt;</code>标签的text density当做是阈值，但是在实践中，有一些content block的text density会低于该阈值，这会导致正文内容的丢失。为了解决这一问题，先把阈值设为0，然后找到最大的DensitySum的标签。紧接着，从<code>&lt;body&gt;</code>标签到该标签路径上，将最小的text density值设为阈值。</p><h1 id="CEPR：Content-Extraction-via-Path-Ratios"><a href="#CEPR：Content-Extraction-via-Path-Ratios" class="headerlink" title="CEPR：Content Extraction via Path Ratios"></a>CEPR：Content Extraction via Path Ratios</h1><p>该算法能够通过$TPR/ETPR$直方图快速、准确的从网页中提取新闻内容。</p><h2 id="Document-Object-Model"><a href="#Document-Object-Model" class="headerlink" title="Document Object Model"></a>Document Object Model</h2><p><img src="https://github.com/conghuaicai/cs-skill-tree/raw/master/spider/web%20content%20extraction/images/1.png" alt="文档树"></p><h2 id="Extended-Labeled-Ordered-Tree"><a href="#Extended-Labeled-Ordered-Tree" class="headerlink" title="Extended Labeled Ordered Tree"></a>Extended Labeled Ordered Tree</h2><p>正文和噪声的主要区别有：</p><ol><li>正文通常只包含在一个部分中，但是噪声信息在很多部分中都会出现；</li><li>正文通常都有相同的tag paths；</li></ol><p><strong>定义：</strong></p><ul><li>$L={l_0,l_1,l_2,…}$,$l_i$表示标记，即tag；</li><li>$T=(V,E,v_0,\prec ,L,l(\cdot),c(\cdot))$<ul><li>$l:V\rightarrow L$是label function，即求出节点所属的标签$l(v)$；</li><li>$c：V\rightarrow String$是content function，即求出节点的本文内容$c(v)$；</li></ul></li></ul><h2 id="Tag-Path"><a href="#Tag-Path" class="headerlink" title="Tag Path"></a>Tag Path</h2><p>$l(v_0),l(v_1)…l(v_k)$称为节点v的tag path，表示为$path(v)$。</p><h2 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h2><ol><li>正文节点有相似的tag paths；</li><li>噪声节点有相似的tag paths；</li><li>正文节点包含更多的文本数据；</li><li>噪声节点包含更少的文本数据；</li><li>所有的节点都是叶子节点；</li></ol><h2 id="Text-to-Tag-Path-Ratio"><a href="#Text-to-Tag-Path-Ratio" class="headerlink" title="Text to Tag Path Ratio"></a>Text to Tag Path Ratio</h2><ul><li><strong>pathNum</strong>：tag path在tree T中出现的次数，这个概念比较容易造成误解，现在的理解是，叶节点是不算在tag path里面的。tag path是一个tag序列标识，tag下可能包含多个叶节点，这些叶结点对应的tag path就是一样的，所以这个序列标识是有可能重复的。</li><li><strong>txtNum</strong>：节点中所有字符的个数；</li><li>$accNodes(p)={v_p^1,v_p^2,…,v_p^m}$是tag path p上可访问的节点的集合；</li><li><strong>Text to Tag Path Radio：</strong>$TPR(p)=\frac{\sum_{v\in accNodes(p)}length(c(v))}{|accNodes(p)|}$<ul><li>对于包含长文本的路径，该值很高；</li><li>对于其他路径，该值很低；</li></ul></li></ul><p>举例子说明：</p><p>上述文档图的TPR计算方式如下:</p><ol><li>#1 text node : <code>tag path = &lt;div.div.div.h1&gt;</code>，txtNum = 40, pathNum=1, TPR=40；</li><li>#2 text node: <code>tag path = &lt;div.div.div.p&gt;</code>，txtNum=645，pathNum=2(因为这个序列出现两次)，TPR=322.5；</li><li>#3 text node: <code>tag path=&lt;div.div.div.p.a&gt;</code>，txtNum=7，pathNum=1，TPR=7；</li><li>#4 text node: <code>tag path=&lt;div.div.div.p&gt;</code>，txtNum=645，pathNum=2，TPR=322.5；</li></ol><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p><img src="https://github.com/conghuaicai/cs-skill-tree/raw/master/spider/web%20content%20extraction/images/2.png" alt="算法流程"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] Sun, F., Song, D., &amp; Liao, L. (2011). DOM based content extraction via text density. Proceedings of the 34th International ACM SIGIR Conference on Research and Development in Information - SIGIR ’11, l, 245. </p><p>[2] Wu, G., Li, L., Hu, X., &amp; Wu, X. (2013). Web news extraction via path ratios. Proceedings of the 22nd ACM International Conference on Conference on Information &amp; Knowledge Management - CIKM ’13, 2059–2068.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在爆炸式增长的互联网时代，互联网上有大量的资源，如何爬取这些资源成为一个热门的研究点。其中如何高效的对网页正文进行抽取、清洗和存储成为一个重要的研究领域。但是，在网页上，除了正文部分，通常还会包含大量的导航栏、广告、版权等信息。相较于正文，这些信息对于我们来说用处不是很大，
      
    
    </summary>
    
      <category term="Spider" scheme="http://yoursite.com/categories/Spider/"/>
    
      <category term="Content Extraction" scheme="http://yoursite.com/categories/Spider/Content-Extraction/"/>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>K-Means</title>
    <link href="http://yoursite.com/2017/12/07/K-Means/"/>
    <id>http://yoursite.com/2017/12/07/K-Means/</id>
    <published>2017-12-07T01:01:09.000Z</published>
    <updated>2018-04-08T07:00:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>​聚类，是机器学习的任务之一。同分类算法一样，聚类算法也被广泛的应用在各个领域，如根据话题，对文章、网页和搜索结果做聚类；根据社区发现对社交网络中的用户做聚类；根据购买历史记录对消费者做聚类。和分类算法不同的是，聚类算法的样本是没有标签的，也就是说，我们并不知道样本有哪些类别，算法需要根据样本的特征，对样本进行聚类，形成不同的聚类中心点。这篇文章，主要介绍比较著名的聚类算法——K-means算法。</p><p>​首先，我们看一下基于目标来做聚类的算法定义:</p><p><strong>Input</strong> : A set S of n points, also a distance/dissimilarity measure specifying the distance d(x, y) between pairs (x, y). </p><p><strong>Goal</strong>: output a partition of the data</p><p>​基于这个定义，选择不同的距离计算公式，有以下三种具体的算法:</p><ul><li><strong>k-means</strong>: find center partitions $c_1, c_2, …, c_k$ to minimize<br>$$ \sum min_{j \in{i, …,k}}d^2(x^i, c_j) $$ </li><li><strong>k-median</strong>: find center partitions $c_1, c_2, …, c_k$ to minimize<br>$$ \sum min_{j \in{i, …,k}}d(x^i, c_j) $$ </li><li><strong>k-center</strong>: find partition to minimize the maximum radius</li></ul><h2 id="Euclidean-k-means-clustering"><a href="#Euclidean-k-means-clustering" class="headerlink" title="Euclidean k-means clustering"></a>Euclidean k-means clustering</h2><p>采用欧拉距离公式的k-means算法定义如下:</p><p><strong>Input</strong>: A set of n datapoints $x^1, x^2, …, x^n$ in $R^d$ (target #clusters k)</p><p><strong>Output</strong>: k representatives $c_1, c_2, …, c_k \in R^d$ </p><p><strong>Objective</strong>: choose $c_1, c_2, …, c_k \in R^d$ to minimize<br>$$ \sum min_{j \in {1,…,k}}||x^i - c_j||^2 $$</p><p>求解该算法的最优解是一个NP难的问题，所有我们没有办法获得最优解，当然，当k=1或d=1这种特殊情况下，是可以获得最优解，有兴趣的可以自行推导一下， 这里不在赘述，这里我们主要介绍Lloyd’s method[1]，该方法的核心算法如下:</p><p><strong>Input</strong>: A set of n datapoints $x^1, x^2, …, x^n$ in $R^d$</p><p><strong>Initialize</strong> centers $c_1, c_2, …, c_k \in R^d$ and clusters $C_1, C_2, …, C_k$ in any way.</p><p><strong>Repeat</strong> until there is no further change in the cost.</p><ol><li>For each j: $C_j &lt;- {x \in S\ whose\ closest\ center\ is\ c_j}$</li><li>For each j: $c_j &lt;- mean\ of\ C_j $</li></ol><p>对于该算法，难度不是特别大，最重要的地方在Repeat中的1，2两个步骤，其中，步骤1将固定住聚类中心$c_1, c_2, …, c_k$，更新聚类集$C_1, C_2, …, C_k$。步骤2固定住聚类集$C_1, C_2, …, C_k$，更新聚类中心$c_1, c_2, …, c_k$。</p><p>大部分学习k-means算法的人理解了步骤1和步骤2就觉得已经理解了k-means了，其实不然，先不说k-means中比较重要的聚类中心的初始化问题，任何一个机器学习算法，它要是有效的，必须证明其可收敛，也需要给出其时间复杂度和空间复杂度。</p><h2 id="Converges"><a href="#Converges" class="headerlink" title="Converges"></a>Converges</h2><ul><li>目标函数的值在每一轮的迭代都会降低，这个特性由算法中步骤1和步骤2保证，因为对于每个样本点，我们每次都是选择最接近的聚类中心；而且，在每个聚类簇里，我们选择平均值作为其聚类中心。</li><li>目标函数有最小值0。</li></ul><p>由于目标函数有最小值，而且在每一轮中都是值都是减少的，所有算法必然会收敛。</p><h2 id="Running-Time"><a href="#Running-Time" class="headerlink" title="Running Time"></a>Running Time</h2><ul><li>O(nkd)  n为样本数 k为聚类中心数 d为维度</li></ul><h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><p>介绍完了整个算法过程、收敛性和时间复杂度之后，该算法的两个核心点需要我们思考: 1. 如何选择k的值; 2. 算法刚开始，并没有聚类中心，如何初始化聚类中心。对于问题1，我目前还没有过多的认识。这里主要介绍问题2，如何初始化聚类中心。</p><h3 id="1-Random-Initialization"><a href="#1-Random-Initialization" class="headerlink" title="1. Random Initialization"></a>1. Random Initialization</h3><p>这种初始化方式是最简单的方式，就是随机选k个点作为聚类中心，虽然简单，但是会存在问题，我们看下面的这个例子:</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010551.jpg" alt="random init"></p><p>由于，我们采用了随机初始化的方式，对于这个样本，我们随机初始化的三个点如上图的绿、红、黑三个样本点，再后面的迭代中，我们最后的聚类簇如上图的箭头所示，这样的效果好吗？显然是不好的，为什么呢？因为很显然最左边三个、中间三个、最右边三个应该是被归为一个聚类簇的:</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010534.jpg" alt="random init2"></p><p>我们可以看到，聚类中心初始化得不好，直接影响我们最后聚类的效果，可能上面举的例子样本分布和初始化聚类中心太极端，不能说明问题， 我们现在假设样本的分布是多个高斯分布的情况下，聚类中心初始化不好导致的最后聚类的效果:</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010548.jpg" alt="random init4"></p><p>我们现在计算一下假设有k个高斯分布，我们随机初始化正确的概率有大(所谓正确是指任何两个随机初始化中心不在同一个高斯分布中):$\frac {k!}{k^k} \approx \frac {1}{e^k}$，当k增大时，这个概率会越来越低。</p><h3 id="2-Furthest-Point-Heuristic"><a href="#2-Furthest-Point-Heuristic" class="headerlink" title="2. Furthest Point Heuristic"></a>2. Furthest Point Heuristic</h3><p>这种方法是一个中心点一个中心点依次进行初始化的，首先随机初始化$c_1$，然后选择距离$c_1$最远的点来初始化$c_2$，以此类推。</p><p>算法描述如下:</p><p>Choose $c_1$ arbitrarily (or at random).</p><p>For j = 2, …, k</p><p>Pick $c_j$ among datapoints $x^1, x^2, …, x^n$ that is farthest from previously chosen $c_1, c_2, …, c_{j-1}$</p><p>这种方法解决了随机初始化高斯分布例子中的问题:</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010552.jpg" alt="dist 1"></p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010546.jpg" alt="dist 2"></p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010549.jpg" alt="dist 3"></p><p>但是，这种方法的问题是容易受噪声点干扰，请看下面的例子:</p><p><img src="http://p6sh0jwf6.bkt.clouddn.com/2018-04-07-010545.jpg" alt="dist 4"></p><p>所以这种方式进行初始化也是不行的，一旦出现噪声点，就极大的影响了最后聚类的结果。虽然实际上，几乎没有哪一个k-means算法会采用上面两种初始化方式，但是这里这样介绍是顺着我们的思维方式进行的，一般思考的方式都是从简单到复杂，所以下面，我们也顺理成章的引出<code>k-means++</code>这个初始化算法， 该算法很好的反映出随机化思想在算法中的重要性。</p><h3 id="3-k-means"><a href="#3-k-means" class="headerlink" title="3. k-means++"></a>3. k-means++</h3><p>算法描述如下:</p><ul><li><p>Choose $c_1$ at random.</p></li><li><p>For j = 2, …, k</p></li><li><p>Pick $c_j$ among $x^1, x^2, …, x^n$ according to the distribution</p><p>  $ Pr(c_j = x^i) \propto min_{j’ &lt; j}\left | x^i - c_{j’} \right |^2 $</p></li></ul><p>这就是k-means++的初始化过程，这个过程比较不好理解。关于这个过程，作以下几点说明:</p><ul><li>这个初始化算法引入随机化，下一个被选为中心点的样本不是固定的，而是一个概率值，这个概率值正比于“离最近中心点的距离“。</li><li>”离最近中心点的距离“如何计算，实际上非常简单，就是当前样本距离各个中心点的距离中，最小的那个距离。</li><li>既然概率正比于 ”距离“ ，那么离群点的”距离“肯定是最大的，它的概率肯定是最大的，可是为什么算法不一定会选择它呢？举个例子说明，如果我们现在有一个聚类集合$S={x_1,x_2,x_3}$,和离群点$x_o$，假设选中 $x_o$的概率为 $1/3$ , 选中 $x_1, x_2, x_3$的概率分别为 $2/9$，这样看，即使$x_o$的概率很大，但是它只有1个，而 $x_1, x_2, x_3$ 即使每个概率不大，但是我们只要随便选中其中一个都是可以的(这是因为它们都在一个聚类簇中，只要选择聚类簇中任何一个点当聚类中心都可以)，所以可以把他们的概率相加，最后得到的概率就大于选中 $x_o$的概率。</li></ul><h2 id="In-Action"><a href="#In-Action" class="headerlink" title="In Action"></a>In Action</h2><p>当然，在实际项目中，我们可能不会自己实现<code>k-means</code>算法， 一般我们都会用现成的比较好的一些机器学习库，我们这里结合<code>scikit-learn</code>来看一下，它是如何实现<code>k-means</code>算法的。</p><p>首先看一下，<code>sklearn.cluster.k_means</code>模块下的函数<code>k_means</code>方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_means</span><span class="params">(X, n_clusters, init=<span class="string">'k-means++'</span>, precompute_distances=<span class="string">'auto'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            n_init=<span class="number">10</span>, max_iter=<span class="number">300</span>, verbose=False,</span></span></span><br><span class="line"><span class="function"><span class="params">            tol=<span class="number">1e-4</span>, random_state=None, copy_x=True, n_jobs=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            algorithm=<span class="string">"auto"</span>, return_n_iter=False)</span>:</span></span><br></pre></td></tr></table></figure><p>首先，我们看到参数有一个<code>init</code>，这里是指定k-means初始化方法，这里我们看下注释:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    init : &#123;'k-means++', 'random', or ndarray, or a callable&#125;, optional</span></span><br><span class="line"><span class="string">        Method for initialization, default to 'k-means++':</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        'k-means++' : selects initial cluster centers for k-mean</span></span><br><span class="line"><span class="string">        clustering in a smart way to speed up convergence. See section</span></span><br><span class="line"><span class="string">        Notes in k_init for more details.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        'random': generate k centroids from a Gaussian with mean and</span></span><br><span class="line"><span class="string">        variance estimated from the data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If an ndarray is passed, it should be of shape (n_clusters, n_features)</span></span><br><span class="line"><span class="string">        and gives the initial centers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If a callable is passed, it should take arguments X, k and</span></span><br><span class="line"><span class="string">        and a random state and return an initialization.</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>可以看到，<code>sklearn</code>实现了2种初始化算法，一个是随机初始化算法，另一个是<code>k-means++</code>算法，默认采用的是<code>k-means++</code>算法。然后，我们先看一下<code>sklearn</code>实现<code>k-means++</code>的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_k_init</span><span class="params">(X, n_clusters, x_squared_norms, random_state, n_local_trials=None)</span>:</span></span><br><span class="line">    <span class="string">"""Init n_clusters seeds according to k-means++</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    -----------</span></span><br><span class="line"><span class="string">    X : array or sparse matrix, shape (n_samples, n_features)</span></span><br><span class="line"><span class="string">        The data to pick seeds for. To avoid memory copy, the input data</span></span><br><span class="line"><span class="string">        should be double precision (dtype=np.float64).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n_clusters : integer</span></span><br><span class="line"><span class="string">        The number of seeds to choose</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    x_squared_norms : array, shape (n_samples,)</span></span><br><span class="line"><span class="string">        Squared Euclidean norm of each data point.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    random_state : numpy.RandomState</span></span><br><span class="line"><span class="string">        The generator used to initialize the centers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n_local_trials : integer, optional</span></span><br><span class="line"><span class="string">        The number of seeding trials for each center (except the first),</span></span><br><span class="line"><span class="string">        of which the one reducing inertia the most is greedily chosen.</span></span><br><span class="line"><span class="string">        Set to None to make the number of trials depend logarithmically</span></span><br><span class="line"><span class="string">        on the number of seeds (2+log(k)); this is the default.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Notes</span></span><br><span class="line"><span class="string">    -----</span></span><br><span class="line"><span class="string">    Selects initial cluster centers for k-mean clustering in a smart way</span></span><br><span class="line"><span class="string">    to speed up convergence. see: Arthur, D. and Vassilvitskii, S.</span></span><br><span class="line"><span class="string">    "k-means++: the advantages of careful seeding". ACM-SIAM symposium</span></span><br><span class="line"><span class="string">    on Discrete algorithms. 2007</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Version ported from http://www.stanford.edu/~darthur/kMeansppTest.zip,</span></span><br><span class="line"><span class="string">    which is the implementation used in the aforementioned paper.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    n_samples, n_features = X.shape</span><br><span class="line"></span><br><span class="line">    centers = np.empty((n_clusters, n_features), dtype=X.dtype)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> x_squared_norms <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>, <span class="string">'x_squared_norms None in _k_init'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set the number of local seeding trials if none is given</span></span><br><span class="line">    <span class="keyword">if</span> n_local_trials <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># This is what Arthur/Vassilvitskii tried, but did not report</span></span><br><span class="line">        <span class="comment"># specific results for other than mentioning in the conclusion</span></span><br><span class="line">        <span class="comment"># that it helped.</span></span><br><span class="line">        n_local_trials = <span class="number">2</span> + int(np.log(n_clusters))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Pick first center randomly</span></span><br><span class="line">    center_id = random_state.randint(n_samples)</span><br><span class="line">    <span class="keyword">if</span> sp.issparse(X):</span><br><span class="line">        centers[<span class="number">0</span>] = X[center_id].toarray()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        centers[<span class="number">0</span>] = X[center_id]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize list of closest distances and calculate current potential</span></span><br><span class="line">    closest_dist_sq = euclidean_distances(</span><br><span class="line">        centers[<span class="number">0</span>, np.newaxis], X, Y_norm_squared=x_squared_norms,</span><br><span class="line">        squared=<span class="keyword">True</span>)</span><br><span class="line">    current_pot = closest_dist_sq.sum()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Pick the remaining n_clusters-1 points</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>, n_clusters):</span><br><span class="line">        <span class="comment"># Choose center candidates by sampling with probability proportional</span></span><br><span class="line">        <span class="comment"># to the squared distance to the closest existing center</span></span><br><span class="line">        rand_vals = random_state.random_sample(n_local_trials) * current_pot</span><br><span class="line">        candidate_ids = np.searchsorted(stable_cumsum(closest_dist_sq),</span><br><span class="line">                                        rand_vals)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compute distances to center candidates</span></span><br><span class="line">        distance_to_candidates = euclidean_distances(</span><br><span class="line">            X[candidate_ids], X, Y_norm_squared=x_squared_norms, squared=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Decide which candidate is the best</span></span><br><span class="line">        best_candidate = <span class="keyword">None</span></span><br><span class="line">        best_pot = <span class="keyword">None</span></span><br><span class="line">        best_dist_sq = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">for</span> trial <span class="keyword">in</span> range(n_local_trials):</span><br><span class="line">            <span class="comment"># Compute potential when including center candidate</span></span><br><span class="line">            new_dist_sq = np.minimum(closest_dist_sq,</span><br><span class="line">                                     distance_to_candidates[trial])</span><br><span class="line">            new_pot = new_dist_sq.sum()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Store result if it is the best local trial so far</span></span><br><span class="line">            <span class="keyword">if</span> (best_candidate <span class="keyword">is</span> <span class="keyword">None</span>) <span class="keyword">or</span> (new_pot &lt; best_pot):</span><br><span class="line">                best_candidate = candidate_ids[trial]</span><br><span class="line">                best_pot = new_pot</span><br><span class="line">                best_dist_sq = new_dist_sq</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Permanently add best center candidate found in local tries</span></span><br><span class="line">        <span class="keyword">if</span> sp.issparse(X):</span><br><span class="line">            centers[c] = X[best_candidate].toarray()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            centers[c] = X[best_candidate]</span><br><span class="line">        current_pot = best_pot</span><br><span class="line">        closest_dist_sq = best_dist_sq</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> centers</span><br></pre></td></tr></table></figure><p>该算法的是基于 k-means++:the advantages of careful seeding[2]实现的，有兴趣的可以看一下这篇论文。代码第49行，可以看到，第一个初始中心是随机初始化的。代码62行，通过循环，依次初始化其他的聚类中心。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li>Lloyd, Stuart P. Least squares quantization in PCM[J]. IEEE Transactions on Information Theory, 1982, 28(2):129-137.</li><li>Arthur D, Vassilvitskii S. k-means++:the advantages of careful seeding[C]// Eighteenth Acm-Siam Symposium on Discrete Algorithms. Society for Industrial and Applied Mathematics, 2007:1027-1035.</li><li>Julyedu 机器学习算法班</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​聚类，是机器学习的任务之一。同分类算法一样，聚类算法也被广泛的应用在各个领域，如根据话题，对文章、网页和搜索结果做聚类；根据社区发现对社交网络中的用户做聚类；根据购买历史记录对消费者做聚类。和分类算法不同的是，聚类算法的样本是没有标签的，也就是说，我们并不知道样本有哪些类
      
    
    </summary>
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
      <category term="Cluster" scheme="http://yoursite.com/categories/Machine-Learning/Cluster/"/>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
  </entry>
  
</feed>
